============================== [ 6장 객체자향 프로그래밍 ] ==============================


[1. 객체지향언어 ]

============================================================================================

[2. 클래스와 객체 ]

 # 2-1 클래스와 객체의 정의와 용도	
	* 클래스란? 객체의 설계도 / 틀 

	* 클래스의 용도? 객체를 생성하는데 사용된다

	* 프로그래밍에서 객체는 클래스에 정의된 내용대로 메모리에 생성된 것을 의미

	* 객체를 만들려면 클래스를 만드는것이 선행되어야 한다

 # 2-2 객체와 인스턴스	
	* 객체와 인스턴스는 같은 의미이지만 문맥에 따라 구별하여 사용한다
		// 클래스 ----------> 인스턴스(객체)
			 (인스턴스화)
	
	* 어떤 클래스로 부터 만들어진 객체를 그 클래스의 인스턴스 라고 한다

 # 2-3 객체의 구성요소 -속성과 기능
	* 일반적으로 객체는 다수의 속성과 다수의 기능을 갖는다. 
		// 객체는 속성과 기능의 집합이다

	* 객체 = 속성(변수) + 기능(메서드)
		// 각변수의 자료형은 속성의 값에 알맞은 것을 선택해야한다

 # 2-4 인스턴스의 생성과 사용
	* 인스턴스(객체)를 사용한다?
		// 클래스 작성 -> 인스턴스 생성 -> 객체 사용

	* 인스턴스 생성 - 클래스를 인스턴스화 한다
		// Tv t;
			- 메모리에 참조변수 t를 위한 공간이 생긴다.(빈 공간)
			- int num; 과 같은 맥락

		// t = new Tv();
			- [new Tv();] new연산자에 의해 Tv클래스의 인스턴스가 메모리의 빈공간에 생성된다
				-- 인스턴스가 메모리의 빈공간에 생성될때 멤벼변수의 값은 각 자료형의 기본값으로 초기화 된다.

			- [t = new Tv;] 대입연산자(=)에 의해 생성된 객체의 주소값이 참조변수 t에 저장된다
				-- 참조변수 t가 Tv인스턴스를 '가리키고 있다', '참조하고 있다'
				-- 참조변수는 인스턴스의 주소를 저장하고 있다

		// 같은 클래스 형식의 두 인스턴스가 있다고 할 때 tv1 = new Tv(); || tv2 = new Tv();
		   두개의 참조변수는 다른 인스턴스를 참조한다
			- System.out.println((tv1==tv2)? "true" : "false"); // false
				-- 참조타입은 주소를 저장하기 때문에 다른주소를 가지고있으면 false
			
			- 만약 tv2의 값을 tv1에 대입한다면? tv1 = tv2;
			  System.out.println((tv1==tv2)? "true" : "false"); // true
				-- 참조하는 주소가 같아졌기 때문에 true
				※다수의 참조변수가 하나의 인스턴스를 참조하는것은 가능※ 


	* 인스턴스는 참조변수를 통해서만 다룰 수 있으며, 참조변수의 타입은 인스턴스의 타입과 일치해야 한다.
		// 상속, 인터페이스 제외

		// ex) Tv t = new Radio(); X

 # 2-5 객체 배열
	* 객체 배열 == 참조변수 배열

	* 많은 수의 객체를 다뤄야할 때 사용

	* 객체 배열 안에 객체가 저장되는것이 아니고 객체의 주소가 저장된다.(참조변수들을 하나로 묶은 참조변수 배열)
		// Tv[] tvArr = new Tv[3]; 
			- 길이가 3인 Tv타입의 참조 변수 배열을 만든다
			- 참조변수 배열은 값을 넣지 않으면 기본값인 null로 초기화된다

		// tvArr[0] = new Tv(); 
			- 0번째에 tv타입 인스턴스를 저장(인스턴스의 주소가 0번째 배열에 저장된다)

		// Tv[] tvArr2 = { new Tv(), new Tv(), new Tv() };
			- 초기화블럭을 사용하여 각 배열에 객체를 대입하는 방법

 # 2-6 클래스의 또 다른 정의 ( 프로그래밍적인 관점에서 클래스의 정의와 의미)
	1. 클래스 : 데이터와 함수의 결합
		// 서로 관련된 변수들을 정의하고 이들에 대한 작업을 수행하는 함수들을 함께 정의해 놓은것

	2. 클래스 : 사용자정의 타입(user-defined type)
		// 사용자 정의 타입이란? : 프로그래밍언어에서 제공하는 자료형외에 프로그래머가 서로 관련된 변수들을 묶어서 하나의
				     타입으로 새로 추가하는 것
		// 자바와 같은 객체지향언어에서는 클래스가 곧 사용자 정의 타입이다.
		
		// 기본형의 갯수가 8개로 정해져있지만 참조형의 갯수가 정해져있지 않은 이유는 프로그래머가 새로운 타입을 추가할 수 있기 때문
		
		// 객체지향언어에서는 제어자와 메서드를 이용해서 조건에 맞는 코드를 쉽게 반영할 수 있다
	
=======================================================================================================

[3. 변수와 메서드 ]

 # 3-1 선언위치에 따른 변수의 종류
	* 선언위치(클래스영역, 매서드영역)에 따라서 클래스변수, 인스턴스변수, 지역변수 세 종류로 나뉜다

	1. 인스턴스변수
		// 클래스 영역에 선언되고 클래스의 인스턴스를 생성할 때 만들어진다 ★★★★★
		// 인스턴스(객체)마다 고유한 상태를 유지해야하는 속성의 경우 인스턴스 변수로 사용

	2. 클래스변수
		// 인스턴스 변수 앞에 static 붙이기만 하면 된다
		// 인스턴스를 생성하지 않아도 언제든지 사용할 수 있다 ★
		// 하나의 클래스로 여려개의 인스턴스를 만들어도 클래스 변수는 값이 모두 동일하다(모든인스턴스가 공통된 저장공간을 공유)
		// 클래스이름.클래스변수 로 값 변경 가능
		// 클래스변수는 클래스를 작성할때 초기화 해야한다 ★

	3. 지역변수
		// 인스턴스 변수, 클래스변수가 아니면 모두 지역변수
		// 메서드 내에서 선언되고 메서드 안에서만 사용가능하다.
		// 메서드가 끝나면 지역변수는 없어진다
		// 지역변수는 초기화를 무조건 해줘야한다
		
	
 # 3-2 클래스변수와 인스턴스변수
	* 인스턴스마다 다른 값을 가지고 있어야 할때는 인스턴스변수로 선언
	* 인스턴스마다 공통된 값을 유지해야할때는 클래스변수로 선언
		// 하나의 인스턴스에서 클래스변수를 변경하면 다른 인스턴스들도 변경된다

 # 3-3 메서드
	* 메서드란? 작업단위로 문장들을 묶어놓은 것
	  메서드는 입력값과 출력값만 알면되기때문에 내부가 보이지 않는 블랙박스라고도 한다

	* 메서드를 사용하는 이유
		1. 높은 재사용성
			// 한번 만들어 놓으면 다른 곳에서도 사용 가능
		
		2. 중복된 코드의 제거
			// 반복적으로 사용되는 코드들을 메서드로 만들어서 중복을 제거 할 수 있고,
			   코드를 변경할때도 반복적인 곳은 메서드 하나만 수정하면 되기때문에 관리가 편하다
		
		3. 프로그램의 구조화
			// 큰 규모의 프로그램에서는 작업단위로 여러 개의 메서드에 담아 프로그램의 구조들 단순화 시킨다
				- 코드가 깔끔해진다
				- 메서드를 작업단위로 만들어 놓고 하나씩 완성하는 것도 프로그램을 구조화하는 좋은 방법이다
					* 메서드만 정의해놓고 구현은 나중에 하는 방법

 # 3-4 메서드의 선언과 구현
	* 메서드는 선언부와 구현부로 나눠져있다

	* 메서드 선언부(method declaration, method header)
		// 선언부는 메서드 이름, 매개변수 선언, 반환타입으로 구성
			- 메서드가 작업을 수행하기 위해 어떤 값들을 필요로 하고 작업의 결과로 어떤 타입의 값을 반환하는지에 대한 정보
		
		// 메서드의 선언부는 신중히 작성되어야 한다
			- 선언부를 수정하면 그 메서드가 호출되는 곳들 모두를 변경해야 하기 때문

		1. 매개변수 선언(parameter declaration)
			// 메서드가 작업을 수행하는데 필요한 값들을 제공받기 위한 것
				- 필요한 값의 갯수만큼 선언이 가능하고 , 로 구분한다 
				- 입력받을 값이 없다면 아무것도 적지 않아도 된다

			// 매개변수도 메서드안에 선언된 변수이기 때문에 지역 변수이다.

		2. 메서드 이름
			// 이름으로 어떤기능을 하는 메서드인지 알아볼 수 있게 작성해야함(주로 동사)
		
		3. 반환타입 
			// 메서드의 수행결과인 반환값(return value)를 적는다
			// 출력할 반환값이 없으면 void로 적는다

	* 메서드 구현부(method body, 메서드 몸통)
		// 메서드 선언부 다음에오는 {} 블록 
			- {}안에는 메서드를 호출했을때 수행될 문장들을 넣는다.

		1. return문
			// 메서드의 반환타입이 void가 아닐경우 무조건 {} 블록 안에 넣어야 한다
				- 반환할 타입은 선언부의 반환타입과 일치하거나 자동형변환 가능한 것만 올 수 있다
		
		2. 지역변수(local variable)
			// 메서드 내에 선언된 변수
			
			// 서로 다른 메서드에서도 지역변수는 같은 변수이름을 가질 수 있다
				- 지역변수는 메서드 내에서만 사용가능한 변수이기 때문

 # 3-5 메서드의 호출
	* 메서드를 호출해야만 구현부{}의 문장들이 수행된다
	* main메서드는 프로그램 실행 시 OS에 의해 자동적으로 호출된다

	1. 인자(argument)와 매개변수(parameter)
		// 메서드를 호출할때 ()안에 지정해준 값 '인자(argument)' 또는 '인수'라 한다
			// int result = add(1,5);  ==> 1과 5는 인자

		// 인자의 개수와 순서는 메서드에 선언된 매개변수와 일치해야한다

		// 인자는 메서드가 호출되면서 매개변수에 대입되므로, 인자의 타입은 매개변수의 타입과 일치하거나 형변환 가능해야한다
			- public double divide(double x, double y){return x / y;}
			- double result = divide(5, 3); 
				==> 메서드가 실행되면 인자가 매개변수로 대입되면서 5,3이 5.0, 3.0으로 바껴서 실행된다

			****** 자동형변환 다시한번 찾아보기

	2. 메서드의 실행흐름
		// 같은 클래스 내의 메서드끼리는 참조변수를 사용하지 않고도 서로 호출이 가능하다
	
		// static 메서드는 같은 클래스 내의 인스턴스 메서드를 호출할 수 없다
			- static 메서드는 객체를 안만들어도 호출이 가능하기 때문에 객체를 만들고 사용해야하는 인스턴스 메서드를
			  호출 할 수 없다
		
		// 메서드가 호출되면 지금까지 실행 중이던 메서드는 실행을 잠시 멈추고 호출된 메서드의 문장드링 실행된다.
		   호출된 메서드의 작업이 모두 끄나면, 다시 호출한 메소드로 돌아와 이후의 문장들이 실행된다

		// 메서드 호출시 인자로 지정된 값은 메서드의 매개변수로 복사된다

		// 메서드는 호출시 념겨받은 값으로 연산을 수행하고 그 결과를 반환하면서 종료된다.

 # 3-6 return문
	* return문은 현재 실행중인 메서드를 종료하고 호출한 메서드로 되돌아간다.
		// 반환타입이 void인 메서드에서 return문을 사용하면 return을 만나면 메서드가 종료되고 호출된 곳으로 돌아간다
			- 조건검사에 사용할 수 있다.

	* 반환값의 유무에 관계없이 모든 메서드는 적어도 하나의 return문이 있어야 하지만 반환타입이 void인 경우, 컴파일러가 메서드의
	  마지막에 return;을 자동적으로 추가해 주기 때문에 생략이 가능하다.
		// 반환값이 있는 경우, 반드시 return문이 있어야 한다.

	* 반환타입이 있는 메서드에서 조건문을 사용하게 되면 각각의 결과에 따라서 return문을 작성해야 한다.

	1. 반환값(return value)
		// return문의 반환값에는 주로 변수가 오지만 수식을 넣어도 된다
			- 수식을 넣을때에는 수식의 결과가 메서드의 반환타입과 같거나 자동형변환가능한 값이어야 한다

	2. 매개변수의 유효성 검사
		// 메서드의 구현부{}를 작성할 때, 제일 먼저 해야 하는 일이 매개변수의 값이 적절한 것인지 확인하는 것이다
			- 적절한 값이 넘어올거라는 생각보단 어떤 값을 넣어도 문제가 없는 메서드를 만들어야한다
			- 모든 경우의 수에 대해 고민하고 그에 대비한 코드를 만들어야한다

		// 메서드를 호출했을때 인자값이 적절하지 않은 값이 넘어올것을 대비해서 유효성 검사를 메서드 안에 넣어야한다★★★★
			- ex) 적절하지 않은 값이 넘어오면 return문을 사용해서 호출한 메서드로 돌아가기

 # 3-7 JVM의 메모리 구조 
	* 응용프로그램이 실행되면, JVM은 시스템으로부터 프로그램을 수행하는데 필요한 메모리를 할당받고,
	  JVM은 이 메모리를 용도에 따라 여러 영역으로 나누어 관리한다
		- method area, call stack, heap ....etc

	1. 메서드 영역(method area)
		// 클래스에 대한 정보(클래스 데이터)가 저장되는 공간, 클래스변수(cv)도 이 영역에 함께 저장된다
			- 프로그램 실행중 어떤 클래스가 사용되면 JVM은 해당 클래스의 클래스파일(.class) 을 읽어 분석하여
			  클래스 데이터를 메서드 영역에 저장

	2. 힙(heap)
		// 인스턴스가 생성되는 공간
			- 인스턴스변수들이 생성되는 공간이다
			- 인스턴스변수는 클래스를 인스턴스화 하면 생성된다(인스턴스 == 인스턴스변수의 집합)

	3. 호출스택(call stack 또는 execution stack)
		// 호출스택은 메서드의 작업에 피요한 메모리 공간을 제공한다
			- 메모리는 메서드가 작업을 수행하는 동안 지역변수들과 연산의 중간결과 등을 저장하는데 사용된다
	
		// 메서드가 작업을 마치면 할당되었던 메모리공간은 비워진다.
		
		// 호출스택의 특징
			1. 메서드가 호출되면 수행에 필요한 만큼의 메모리를 스택에 할당받는다.
			2. 메서드가 수행을 마치고나면 사용했던 메모리를 반환하고 스택에서 제거된다.
			3. 호출스택의 제일 위에 있는 메서드가 현재 실행 중인 메서드이다.
			4. 아래에 있는 메서드가 바로 위의 메서드를 호출한 메서드이다.

 # 3-8 기본형 매개변수와 참조형 매개변수
	* 메서드를 호출할 때 매개변수로 지정한 값을 메서드의 매개변수에 복사해서 넘겨준다
		// 메서드 호출시 인자값을 메서드가 받을때 기본형 매개변수는 기본타입을 받고 참조형 매개변수는 인스턴스의 주소를 받는다

	* 기본형 매개변수는 메서드를 호출할때 인자값으로 넘겨준 데이터를 읽기만 할 수 있고, 
	  참조형 매개변수는 메서드를 호출할때 인자값으로 넘겨준 인스턴스 주소를 통해 데이터를 읽고 변경할 수 있다
		// 배열도 객체와 같이 참조변수를 통해 데이터가 저장된 공간에 접근한다

 # 3-9 참조형 반환타입
	* 메서드의 반환타입도 참조형이 될 수 있다. 
		// int[] sumArr(int[] arr){ ...  return '참조형 타입반환';}

	* 반환타입이 참조형인 메서드를 다른곳에서 받을때는 메서드에서 반환된 인스턴스주소를 담을 참조형 변수를 생성하고 초기화해야한다
		// 연결되어 있지 않은 인스턴스들은 JVM의 가비지 컬렉터가 자동으로 인스턴스를 소멸시키기 때문
			- int[] result = sumArr(arr);

	* 반환타입이 참조형이라는 것은 메서드가 객체의 주소를 반환한다는 것을 의미한다 

 #3-10 재귀호출(recursive call)
	* 재귀호출이란?
		// 메서드의 내부에서 메서드 자신을 호출하는 것
		// 다중의 반복문과 조건문으로 작성된 코드를 재귀호출로 작성하면 단순한 구조로 바꿀 수 있다
			- 반복문보다 재귀호출이 비효율적(수행시간이 더 오래 걸린다)
		// 비효율 적이므로 소스파일을 간결하게 작성했을때 이득이 더 큰 경우에만 사용해야한다
	
	* 재귀호출의 예
		// 팩토리얼
			- 한 숫자가 1이 될 때까지 1씩 감소시켜가면서 계속해서 곱해 나가는 것(n!)

	
 #3-11 클래스 메서드(static 메서드)와 인스턴스 메서드
	* 메서드 앞에 static이 붙어있으면 클래스메서드, 아니면 인스턴스 메서드

	* 인스턴스변수,인스턴스메서드를 사용하지 않을때 클래스메서드(static메서드) 선언한다
		// static메서드는 인스턴스변수를 사용할 수 없기 때문
		// static메서드로 선언하면 메서드 호출시간이 짧아지므로 성능이 향상된다

 # 3-12 클래스 멤버와 인스턴스 멤버간의 참조와 호출
	* 같은 클래스에서는 인스턴스를 생성하지 않고 멤버들 끼리 참조 또는 호출이 가능
	  단, 클래스멤버가 인스턴스 멤버에 접근하려면 인스턴스를 생성해야한다

 # 참조변수를 선언하지 않고 인스턴스 메서드 호출
	* int result = new MemberCall().instanceMethod1();
		// 참조변수를 선언하지 않았기 때문에 인스턴스는 값만 넘겨주고 사용할 수 없게 된다
		// 이렇게 쓸거면 static 메서드를 사용하는게 좋지 않을까?
			- int result = MemberCall().classMethod(1,2);

=======================================================================================================


[4. 오버로딩(overloading) ]

 # 4-1 오버로딩이란?
	// 한 클래스 안에서 같은 이름의 메서드를 여러 개 정의하는 것

 # 4-2 오버로딩의 성립 조건
	1. 메서드 이름이 같아야 한다
	2. 매개변수의 개수 또는 타입이 달라야 한다.
	3. 반환 타입은 오버로딩을 구현하는데 아무런 영향을 주지 못한다

 # 4-3 오버로딩의 예 및 사용 이유
	// println() 메서드
		- 인자로 어떤 값을 넣어도 컴파일러가 오버로딩된 메서드중에 넣은 인자의 타입의 메서드를 찾아서 실행한다
		
	// 메서드의 이름은 어떤 동작을 의미한다. 타입이 다른값들을 넣어도 같은동작을 할 수 있게 만드는게 오버로딩이다
		- 사용자는 메서드 안의 내용은 중요하지 않기 때문에 사용자가 어떠한 값을 입력해도 동작하게 하려면 오버로딩을 사용해야한다

 # 4-4 오버로딩의 장점
	* 메서드 이름만 보고 같은 기능을 하겠다는 예측을 할 수 있다

	* 메서드의 이름을 절약 할 수있다

 # 4-5 가변인자(varargs)와 오버로딩
	* JDK 1.5부터 매개변수 개수를 동적으로 지정해 줄 수 있다

	* 매개변수 자리에 (타입... args) 을 넣으면 가변인자가 된다
		// 매개변수 중 가변인자를 넣고 싶으면 맨 마지막에 넣어야 한다.

	* 가변인자의 특징
		// 인재의 개수를 가변적으로 할 수 있다.(인자가 없어도 되고, 배열도 인자에 넣을 수 있다)
		
		// 가변인자는 내부적으로 배열을 이용하는 것이다.
			- 가변인자가 선언된 메서드를 호출할 때마다 배열이 새로 생성된다.

	* 매개변수타입을 가변인자로 하는것과 배열로 하는것의 차이
		// 가변인자는 인자를 넣지 않아도 오류가 안나지만 배열은 인자를 넣지 않으면 오류가 난다
			- 배열은 null을 넣어줘야한다

	* 가변인자를 매개변수로 선언한 메서드를 오버로딩하면, 메서드를 호출했을 때 구별되지 못하는 경우가 발생하기 쉽다
		// 가능하면 가변인자를 사용한 메서드는 오버로딩하지 않는 것이 좋다.

=======================================================================================================

[5. 생성자(Contructor) ] 

 # 5-1 생성자란?
	* 인스턴스가 생성될 때 호출되는 '인스턴스 초기화 메서드'

	* 메서드와 유사하지만 리턴값이 없다

	* 생성자의 조건
		1. 생성자의 이름은 클래스의 이름과 같아야한다
		2. 리턴값이 없다
			// ex) public Card(){} (기본생성자)

	* 생성자는 인스턴스변수를의 초기화에 사용되는 조금 특별한 메서드 이다
		// 생성자가 인스턴스를 생성하는게 아니고 new연산자가 인스턴스를 생성하는 것이다
		// 인스턴스 생성 수행 과정
			클래스명 참조변수명 = new 클래스명();
			1. 연산자 new에 의해서 heap메모리에 인스턴스가 생성된다.
			2. 생성자가 호출되어 수행된다.
			3. new의 결과로 생성된 인스턴스의 주소가 참조변수에 저장된다

 # 5-2 기본 생성자(Default Constructor)
	* 모든 클래스에는 반드시 생성자가 하나 이상 있어야 한다

	* 생성자를 정의하지 않은 경우 컴파일러에 의해서 자동으로 기본생성자가 생성된다

	* 생성자가 존재할 경우 컴파일러는 기본생성자를 생성 하지 않는다
		// 기본생성자 만드는 습관 중요 ★★

 # 5-3 매개변수가 있는 생성자
	* 인스턴스마다 다른 값으로 초기화되어야하는 경우가 많기 때문에 매개변수를 사용한 초기화는 유용하다

	* 인스턴스를 생성하는 동시에 원하는 값으로 초기화한다

	* 기본생성자를 통해 인스턴스를 만들고 인스턴스변수를 초기화하는것보다 코드가 간결하고 깔끔해진다

 # 5-4 생성자에서 다른 생성자 호출하기 - this()
	* 생성자 간에도 서로 호출이 가능
	
	* 조건
		1. 생성자의 이름으로 클래스이름 대신 this를 사용한다
			- Card(){ this("heart", 7); }
		2. 한 생성자에서 다른 생성자를 호출할 때는 반드시 첫 줄에서만 호출이 가능하다.
			- 호출된 다른 생성자에서도 초기화 작업을 하기 때문에 호출전 작업은 무의미해진다

 # 5-4-1 참조변수 this
	* 인스턴스변수(iv)와 메서드의 매개변수 이름이 같을 때는 참조변수 this로 iv와 lv를 구분한다

	* 참조변수 this는 인스턴스의 주소를 가지고 있다
		- 인스턴스의 주소를 가지고 있기 때문에 static메서드 에서는 사용이 불가능 하다
		  이유는 인스턴스 변수(iv)가 클래스메서드(static 메서드)에서 사용이 불가능 한것과 동일

	* 인스턴스멤버는 자신이 관련된 인스턴스를 가리키는 참조변수 'this'가 지역변수로 숨겨진채 존재한다
		

 # 5-4-2 생성자 this(), 참조변수 this
	* 참조변수 this : 인스턴스 자신을 가리키는 참조변수, 인스턴스의 주소가 저장되어 있다.
	
	* this(), this(매개변수) : 생성자, 같은 클래스의 다른 생성자를 호출할 때 사용된다


	