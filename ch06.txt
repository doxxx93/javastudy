============================== [ 6장 객체자향 프로그래밍 ] ==============================


[1. 객체지향언어 ]

============================================================================================

[2. 클래스와 객체 ]

 # 2-1 클래스와 객체의 정의와 용도	
	* 클래스란? 객체의 설계도 / 틀 

	* 클래스의 용도? 객체를 생성하는데 사용된다

	* 프로그래밍에서 객체는 클래스에 정의된 내용대로 메모리에 생성된 것을 의미

	* 객체를 만들려면 클래스를 만드는것이 선행되어야 한다

 # 2-2 객체와 인스턴스	
	* 객체와 인스턴스는 같은 의미이지만 문맥에 따라 구별하여 사용한다
		// 클래스 ----------> 인스턴스(객체)
			 (인스턴스화)
	
	* 어떤 클래스로 부터 만들어진 객체를 그 클래스의 인스턴스 라고 한다

 # 2-3 객체의 구성요소 -속성과 기능
	* 일반적으로 객체는 다수의 속성과 다수의 기능을 갖는다. 
		// 객체는 속성과 기능의 집합이다

	* 객체 = 속성(변수) + 기능(메서드)
		// 각변수의 자료형은 속성의 값에 알맞은 것을 선택해야한다

 # 2-4 인스턴스의 생성과 사용
	* 인스턴스(객체)를 사용한다?
		// 클래스 작성 -> 인스턴스 생성 -> 객체 사용

	* 인스턴스 생성 - 클래스를 인스턴스화 한다
		// Tv t;
			- 메모리에 참조변수 t를 위한 공간이 생긴다.(빈 공간)
			- int num; 과 같은 맥락

		// t = new Tv();
			- [new Tv();] new연산자에 의해 Tv클래스의 인스턴스가 메모리의 빈공간에 생성된다
				-- 인스턴스가 메모리의 빈공간에 생성될때 멤벼변수의 값은 각 자료형의 기본값으로 초기화 된다.

			- [t = new Tv;] 대입연산자(=)에 의해 생성된 객체의 주소값이 참조변수 t에 저장된다
				-- 참조변수 t가 Tv인스턴스를 '가리키고 있다', '참조하고 있다'
				-- 참조변수는 인스턴스의 주소를 저장하고 있다

		// 같은 클래스 형식의 두 인스턴스가 있다고 할 때 tv1 = new Tv(); || tv2 = new Tv();
		   두개의 참조변수는 다른 인스턴스를 참조한다
			- System.out.println((tv1==tv2)? "true" : "false"); // false
				-- 참조타입은 주소를 저장하기 때문에 다른주소를 가지고있으면 false
			
			- 만약 tv2의 값을 tv1에 대입한다면? tv1 = tv2;
			  System.out.println((tv1==tv2)? "true" : "false"); // true
				-- 참조하는 주소가 같아졌기 때문에 true
				※다수의 참조변수가 하나의 인스턴스를 참조하는것은 가능※ 


	* 인스턴스는 참조변수를 통해서만 다룰 수 있으며, 참조변수의 타입은 인스턴스의 타입과 일치해야 한다.
		// 상속, 인터페이스 제외

		// ex) Tv t = new Radio(); X

 # 2-5 객체 배열
	* 객체 배열 == 참조변수 배열

	* 많은 수의 객체를 다뤄야할 때 사용

	* 객체 배열 안에 객체가 저장되는것이 아니고 객체의 주소가 저장된다.(참조변수들을 하나로 묶은 참조변수 배열)
		// Tv[] tvArr = new Tv[3]; 
			- 길이가 3인 Tv타입의 참조 변수 배열을 만든다
			- 참조변수 배열은 값을 넣지 않으면 기본값인 null로 초기화된다

		// tvArr[0] = new Tv(); 
			- 0번째에 tv타입 인스턴스를 저장(인스턴스의 주소가 0번째 배열에 저장된다)

		// Tv[] tvArr2 = { new Tv(), new Tv(), new Tv() };
			- 초기화블럭을 사용하여 각 배열에 객체를 대입하는 방법

 # 2-6 클래스의 또 다른 정의 ( 프로그래밍적인 관점에서 클래스의 정의와 의미)
	1. 클래스 : 데이터와 함수의 결합
		// 서로 관련된 변수들을 정의하고 이들에 대한 작업을 수행하는 함수들을 함께 정의해 놓은것

	2. 클래스 : 사용자정의 타입(user-defined type)
		// 사용자 정의 타입이란? : 프로그래밍언어에서 제공하는 자료형외에 프로그래머가 서로 관련된 변수들을 묶어서 하나의
				     타입으로 새로 추가하는 것
		// 자바와 같은 객체지향언어에서는 클래스가 곧 사용자 정의 타입이다.
		
		// 기본형의 갯수가 8개로 정해져있지만 참조형의 갯수가 정해져있지 않은 이유는 프로그래머가 새로운 타입을 추가할 수 있기 때문
		
		// 객체지향언어에서는 제어자와 메서드를 이용해서 조건에 맞는 코드를 쉽게 반영할 수 있다
	
=======================================================================================================

[3. 변수와 메서드 ]

 # 3-1 선언위치에 따른 변수의 종류
	* 선언위치(클래스영역, 매서드영역)에 따라서 클래스변수, 인스턴스변수, 지역변수 세 종류로 나뉜다

	1. 인스턴스변수
		// 클래스 영역에 선언되고 클래스의 인스턴스를 생성할 때 만들어진다 ★★★★★
		// 인스턴스(객체)마다 고유한 상태를 유지해야하는 속성의 경우 인스턴스 변수로 사용

	2. 클래스변수
		// 인스턴스 변수 앞에 static 붙이기만 하면 된다
		// 인스턴스를 생성하지 않아도 언제든지 사용할 수 있다 ★
		// 하나의 클래스로 여려개의 인스턴스를 만들어도 클래스 변수는 값이 모두 동일하다(모든인스턴스가 공통된 저장공간을 공유)
		// 클래스이름.클래스변수 로 값 변경 가능
		// 클래스변수는 클래스를 작성할때 초기화 해야한다 ★

	3. 지역변수
		// 인스턴스 변수, 클래스변수가 아니면 모두 지역변수
		// 메서드 내에서 선언되고 메서드 안에서만 사용가능하다.
		// 메서드가 끝나면 지역변수는 없어진다
		// 지역변수는 초기화를 무조건 해줘야한다
		
	
 # 3-2 클래스변수와 인스턴스변수
	* 인스턴스마다 다른 값을 가지고 있어야 할때는 인스턴스변수로 선언
	* 인스턴스마다 공통된 값을 유지해야할때는 클래스변수로 선언
		// 하나의 인스턴스에서 클래스변수를 변경하면 다른 인스턴스들도 변경된다

 # 3-3 메서드
	* 메서드란? 작업단위로 문장들을 묶어놓은 것
	  메서드는 입력값과 출력값만 알면되기때문에 내부가 보이지 않는 블랙박스라고도 한다

	* 메서드를 사용하는 이유
		1. 높은 재사용성
			// 한번 만들어 놓으면 다른 곳에서도 사용 가능
		
		2. 중복된 코드의 제거
			// 반복적으로 사용되는 코드들을 메서드로 만들어서 중복을 제거 할 수 있고,
			   코드를 변경할때도 반복적인 곳은 메서드 하나만 수정하면 되기때문에 관리가 편하다
		
		3. 프로그램의 구조화
			// 큰 규모의 프로그램에서는 작업단위로 여러 개의 메서드에 담아 프로그램의 구조들 단순화 시킨다
				- 코드가 깔끔해진다
				- 메서드를 작업단위로 만들어 놓고 하나씩 완성하는 것도 프로그램을 구조화하는 좋은 방법이다
					* 메서드만 정의해놓고 구현은 나중에 하는 방법

 # 3-4 메서드의 선언과 구현
	* 메서드는 선언부와 구현부로 나눠져있다

	* 메서드 선언부(method declaration, method header)
		// 선언부는 메서드 이름, 매개변수 선언, 반환타입으로 구성
			- 메서드가 작업을 수행하기 위해 어떤 값들을 필요로 하고 작업의 결과로 어떤 타입의 값을 반환하는지에 대한 정보
		
		// 메서드의 선언부는 신중히 작성되어야 한다
			- 선언부를 수정하면 그 메서드가 호출되는 곳들 모두를 변경해야 하기 때문

		1. 매개변수 선언(parameter declaration)
			// 메서드가 작업을 수행하는데 필요한 값들을 제공받기 위한 것
				- 필요한 값의 갯수만큼 선언이 가능하고 , 로 구분한다 
				- 입력받을 값이 없다면 아무것도 적지 않아도 된다

			// 매개변수도 메서드안에 선언된 변수이기 때문에 지역 변수이다.

		2. 메서드 이름
			// 이름으로 어떤기능을 하는 메서드인지 알아볼 수 있게 작성해야함(주로 동사)
		
		3. 반환타입 
			// 메서드의 수행결과인 반환값(return value)를 적는다
			// 출력할 반환값이 없으면 void로 적는다

	* 메서드 구현부(method body, 메서드 몸통)
		// 메서드 선언부 다음에오는 {} 블록 
			- {}안에는 메서드를 호출했을때 수행될 문장들을 넣는다.

		1. return문
			// 메서드의 반환타입이 void가 아닐경우 무조건 {} 블록 안에 넣어야 한다
				- 반환할 타입은 선언부의 반환타입과 일치하거나 자동형변환 가능한 것만 올 수 있다
		
		2. 지역변수(local variable)
			// 메서드 내에 선언된 변수
			
			// 서로 다른 메서드에서도 지역변수는 같은 변수이름을 가질 수 있다
				- 지역변수는 메서드 내에서만 사용가능한 변수이기 때문

 # 3-5 메서드의 호출
	* 

			

	
		