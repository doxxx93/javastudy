1. 상속
상속의 정의와 장점
상속이란?
기존의 클래스를 재사용해서 새로운 클래스를 작성하는 것
핵심 : 기존의 클래스를 재사용할 수 있다
1. 코드의 재사용성을 높이고 중복을 제거
2. 생산성과 유지보수에 크게 기여
작성법
클래스 이름 뒤에 상속받고자 하는 클래스의 이름을 ‘extends’와 함께 작성
예)
class Child extends Parent {
// 구현내용
“extends를 사용하여 작성한 두 클래스는 서로 상속관계에 있다”
**조상 클래스 : 부모(parent) / 상위(super) / 기반(base) 클래스
**자손 클래스 : 자식(child) / 하위(sub) / 파생된(derived) 클래스

< 상속계층도 사진>

자손 클래스는 조상 클래스의 모든 멤버를 상속받기 때문에, 포함한다고 할 수 있다.
조상 클래스에 새로운 멤버가 추가되면, 자손 클래스에도 자동적으로 추가하는 효과가 있다.
반대로 자손 클래스에 새로운 코드가 추가되어도, 조상 클래스에는 아무런 영향도 미치지 않는다.
상속에 상속을 거듭할수록 자손 클래스는 상위 클래스들의 멤버를 모두 상속 받으므로, 멤버의 개수가 점점 늘어난다.

**생성자와 초기화 블럭은 상속되지 않는다. 멤버만 상속된다.
**자손 클래스의 멤버 개수는 조상 클래스보다 항상 같거나 많다.

자손클래스의 인스턴스 생성 = 조상클래스멤버 + 자손클래스멤버
따로 조상 인스턴스 생성하지 않아도, 조상 클래스의 멤버도 사용할 수가 있다.

클래스간의 관계 - 포함관계
상속 이외에 클래스를 재사용하는 방법 : 포함(Composite)
클래스의 멤버변수로 다른 타입의 참조변수를 선언하는 것
클래스를 미리 작성해 놓고, 그 클래스를 멤버변수로 선언하여 포함을 맺어준다.

클래스간의 관계 결정하기
상속관계를 맺을까, 포함관계를 맺을까?
상속관계 : ‘~은 ~이다. (is-a)’
포함관계 : ‘~은 ~을 가지고 있다.(has-a)’
예)
* 포함한 경우
class Circle {
	Point c = new Point();
int r;
}
* 상속한 경우
class Circle extends Point {
int r;
}
원(Circle)은 점(Point)이다. - Circle is a Point.
원(Circle)은 점(Point)을 가지고 있다. - Circle has a Point.
이 때에는 포함관계를 맺어주는 것이 더 낫다.



단일상속(single ingeritance)
자바는 오직 단일 상속만을 허용한다.
= 조상은 하나만 허용된다.
다중 상속을 허용할 경우, 부모 클래스들 사이에 중복된 이름의 멤버들이 있을 경우 서로간의 구분이 불가능하므로 조상 클래스를 바꿔야 하는 문제가 생긴다.

Object클래스 - 모든 클래스의 조상
Object클래스는 모든 클래스 상속계층도의 최상위에 있는 조상클래스다.
모든 클래스는 Object 클래스를 상속받는다.
1. 다른 클래스를 상속받지 않는 경우
컴파일러가 자동으로 ‘extends Object’를 추가
2. 다른 클래스를 상속받는 경우
상속계층도를 따라 조상클래스의 조상클래스로 쭉 따라 올라가면 결국에는 Object 클래스까지 상속받게 된다.

2. 오버라이딩(overriding)
오버라이딩이란?
조상 클래스로부터 상속받은 메서드의 내용만을 변경하는 것
상속받은 메서드를 자손 클래스에 맞게 변경해야 하는 경우

오버라이딩의 조건
자손 클래스에서 오버라이딩하는 메서드는 조상 클래스의 메서드와
1. 이름이 같아야 한다.
2. 매개변수가 같아야 한다.
3. 반환타입이 같아야 한다.
** 선언부가 일치해야 한다.

접근 제어자는 조상 클래스의 메서드보다 좁은 범위로 변경할 수 없다.
조상 클래스의 메서드보다 많은 수의 예외를 선언할 수 없다.
인스턴스 메서드를 static메서드로 또는 그 반대로 변경할 수 없다.

오버로딩 vs. 오버라이딩
오버로딩과 오버라이딩의 차이는 무엇일까?
오버로딩은 매개변수를 달리하여 기존에 없는 새로운 메서드를 정의하는 것. → new!
오버라이딩은 상속받은 메서드의 내용을 변경하는 것. → change, modify!

super
super는 참조변수이다.
자손 클래스에서 조상 클래스로부터 상속받은 멤버를 참조한다.
언제 사용할까?
조상클래스 멤버와 자손클래스 멤버가 중복정의되어 서로 구별해야 하는 경우
변수와 메서드에서 사용 가능
this와 super
모든 인스턴스메서드에는 자신이 속한 인스턴스의 주소가 지역변수로 저장되는데, 이것이 참조변수인 this와 super의 값이 된다.
static 메서드에서는 사용할 수 없고 인스턴스 메서드에서만 사용 가능하다. (static 메서드는 인스턴스와 관련이 없기 때문이다.)





super() - 조상 클래스의 생성자
조상클래스를 상속받은 자손클래스
1. 자손멤버+조상멤버가 합쳐진 하나의 인스턴스 생성
2. 조상클래스 멤버의 초기화 작업 수행
→ 자손클래스의 생성자에서 조상클래스의 생성자가 호출되어야 한다.
3. 조상클래스 멤버변수는 조상의 생성자에 의해 초기화된다.


생성자의 첫 줄에서 조상클래스의 생성자를 호출해야 하는 이유?
자손클래스의 멤버가 조상클래스의 멤버를 사용할 수도 있으므로, 조상 멤버들이 먼저 초기화 되어있어야만 한다.
조상클래스 생성자의 호출은 상속관계를 거슬러 올라가며 마지막 Object() 까지 가서 끝이 난다.
Object클래스를 제외한 모든 클래스의 생성자 첫 줄에 생성자 this() 또는 super()를 호출해야 한다. 그렇지 않으면 컴파일러가 자동적으로 super();를 생성자의 첫 줄에 삽입한다.

** 335페이지 이미지

클래스 : 어떤 클래스의 인스턴스를 생성할 것인가?
생성자 : 선택한 클래스의 어떤 생성자를 이용해서 인스턴스를 생성할 것인가?

3. package와 import
패키지(package)
패키지란?
패키지란 “클래스의 묶음” 이다.
클래스 또는 인터페이스를 포함시킬 수 있다.
서로 관련된 클래스를 그룹단위로 묶어 효율적으로 관리할 수 있다.
물리적으로 하나의 디렉토리다.
클래스의 실제 이름(full name)은 패키지명을 포함한 것이다.

1. 하나의 소스파일에는 첫 번째 문장으로 단 한 번의 패키지 선언만을 허용한다.
2. 모든 클래스는 반드시 하나의 패키지에 속해야 한다.
3. 패키지는 점(.)을 구분자로 하여 계층구조로 구성할 수 있다.
4. 패키지는 물리적으로 클래스파일(.class)을 포함하는 하나의 디렉토리다.


패키지의 선언
클래스나 인터페이스의 소스파일(.java)의 맨 위에 한 줄을 적어준다.
package 패키지명;
반드시 주석과 공백을 제외한 첫 번째 문장이어야 하며, 하나의 소스파일에 단 한 번만 선언될 수 있다.
패키지를 선언하지 않은 소스파일은?
자바에서 기본적으로 제공하는 ‘이름없는 패키지(unnamed package)’에 속한다.
패키지를 지정하지 않은 모든 클래스들은 같은 패키지에 속하는 셈이다.


import문
언제 사용할까?
사용하고자 하는 클래스의 패키지명을 생략하고 싶을 때
원래는 다른 패키지의 클래스 사용시, 패키지명이 포함된 클래스 이름을 사용해야 한다.

import문의 선언
package문 다음에, 클래스 선언문 이전에 위치 
일반적인 소스파일(*.java)의 구성 순서
1. package문
2. import문
3. 클래스 선언
형식
import 패키지명.클래스명; 또는 import 패키지명.*;
모든 소스파일에는 묵시적으로 import java.lang.*이 선언되어 있다.
다만, 클래스 이름 대신 ‘*’을 사용하는 것이 하위 패키지의 클래스까지 포함하는 것은 아니다.

static import문
왜 사용할까?
static멤버를 호출할 때 클래스 이름을 생략할 수 있다.

4. 제어자(modifier)
제어자란?
클래스, 변수, 메서드의 선언부에 함께 사용되어 부가적 의미 부여
접근제어자, 그 외 제어자
접근제어자 : public, protected, default, private
그외제어자 : static, final, abstract, native, transient, synchronized, volatile, strictfp
접근 제어자는 한 번에 하나만 선택해서 사용할 수 있다.

static - 클래스의, 공통적인
멤버변수, 메서드, 초기화 블럭에 사용
인스턴스를 생성하지 않고도 사용할 수 있는 멤버들이다.

제어자
대상
의미
static
멤버변수
-모든 인스턴스에 공통적으로 사용되는 클래스변수가 된다.
-클래스변수는 인스턴스를 생성하지 않고도 사용 가능하다.
-클래스가 메모리에 로드될 때 생성된다.
메서드
-인스턴스를 생성하지 않고도 호출이 가능한 static 메서드가 된다.
-static메서드 내에서는 인스턴스멤버들을 직접 사용할 수 없다.



final - 마지막의, 변경될 수 없는
클래스, 메서드, 멤버변수, 지역변수에 사용

제어자
대상
의미
final
클래스
변경될 수 없는 클래스, 확장될 수 없는 클래스가 된다. 그래서 final로 지정된 클래스는 다른 클래스의 조상이 될 수 없다.
메서드
변경될 수 없는 메서드, final로 지정된 메서드는 오버라이딩을 통해 재정의될 수 없다.
멤버변수
변수 앞에 final이 붙으면, 값을 변경할 수 없는 상수가 된다.
지역변수


생성자를 이용한 final멤버 변수의 초기화
final이 붙은 인스턴스변수는 모두 같은 값을 가져야만 할까?
final이 붙은 변수는 상수이므로 일반적으로 선언과 초기화를 동시에 하지만, 인스턴스변수의 경우 생성자에서 초기화시킬 수 있다.
1. 클래스 내 매개변수를 갖는 생성자 선언
2. 인스턴스 생성 시, final 멤버변수의 초기화 값을 매개변수로 제공받기
예) 예제 7-12 FinalCardTest.java : 상수지만 선언과 함께 초기화하지 않고, 생성자에서 단 한번 초기화할 수 있도록 만든다.


abstract - 추상의, 미완성의
클래스, 메서드에서 사용
메서드의 선언부만 작성하고 실제 수행내용은 구현하지 않은 추상 메서드를 선언하는데에 사용
미완성 설계도이므로 인스턴스 생성할 수 없다.

제어자
대상
의미
abstract
클래스
클래스 내에 추상 메서드가 선언되어 있음을 의미한다.
메서드
선언부만 작성하고 구현부는 작성하지 않은 추상 메서드임을 알린다.



접근 제어자(access modifier)
클래스, 멤버변수, 메서드, 생성자에 사용
외부에서 접근하지 못하도록 제한하는 역할
1. private : 같은 클래스 내에서만 접근 가능
2. default : 같은 패키지 내에서만 접근 가능
3. protected : 같은 패키지 내 + 다른 패키지의 자손클래스에서 접근 가능
4. public : 접근 제한이 전혀 없음
public > protected > (default) > private


대상
사용가능한 접근 제어자
클래스
public, (default)
메서드
public, protected, (default), private
멤버변수
지역변수
없음


외부로부터의 데이터 보호
외부에는 불필요한, 내부적으로만 사용되는 부분을 감추기 위함

겟터(getter)와 셋터(setter)
보통 멤버변수를 private이나 protected로 제한하고, 멤버변수 값을 읽고 변경할 수 있는 public 메서드를 제공하여 간접적으로 다루게 한다.
get으로 시작하는 메서드는 단순히 멤버변수의 값을 반환하는 역할
set으로 시작하는 메서드는 매개변수에 지정된 값을 검사하여 조건에 맞을 때만 멤버변수의 값을 변경
get으로 시작하는 메서드를 겟터, set으로 시작하는 메서드를 셋터라고 한다.

생성자의 접근 제어자
생성자에 접근제어자를 사용하여 인스턴스의 생성 제한
보통 생성자의 접근제어자 = 클래스의 접근제어자
생성자의 접근제어자를 private으로 지정하면 외부에서 생성자에 접근할 수 없다.
→ 외부에서 해당 클래스의 인스턴스 생성할 수 없다.
다만, 인스턴스를 생성해서 반환해주는 public메서드를 제공하기도 한다.
→ 해당 메서드는 public인 동시에 static이어야 한다.
생성자가 private 인 클래스는 다른 클래스의 조상이 될 수 없다.

제어자(modifier)의 조합
1. 메서드에 static과 abstract를 함께 사용할 수 없다.
→ static 메서드는 몸통이 있는 메서드에만 사용 가능하기 때문
2. 클래스에 abstract와 final을 동시에 사용할 수 없다.
→ 클래스에 사용되는 final은 클래스를 확장할 수 없다는 의미, abstract는 상속을 통해서 완성되어야 한다는 의미이므로 서로 모순된다.
3. abstract메서드의 접근제어자가 private일 수 없다.
→ abstract메서드는 자손클래스에서 구현해줘야 하는데, 접근제어자가 private이면 자손클래스에서 접근할 수 없기 때문이다.
4. 메서드에 private과 final을 같이 사용할 필요는 없다.
→ 접근제어자가 private인 메서드는 오버라이딩될 수 없기 때문이다. 둘 중 하나만 사용해도 의미가 충분하다.

5. 다형성
다형성이란?
‘여러 가지 행태를 가질 수 있는 능력’
한 타입의 참조변수로 여러 타입의 객체를 참조할 수 있다.
→ 조상클래스 타입의 참조변수로 자손클래스의 인스턴스를 참조할 수 있다.
→ 자손클래스 타입의 참조변수로 조상클래스의 인스턴스는 참조할 수 없다.
참조변수가 사용할 수 있는 멤버의 개수는 인스턴스의 멤버 개수보다 같거나 적어야 한다.
인스턴스를 같은 타입의 참조변수로 참조하는 것과 조상타입의 참조변수로 참조하는 것은 어떤 차이가 있을까? - “사용할 수 있는 멤버의 개수”
예) Tv t = new CaptionTv();
CaptionTv c = new CaptionTv();
실제 인스턴스가 CaptionTv타입이지만, 참조변수 t로는 CapionTv의 모든 멤버를 사용할 수 없다.
Tv타입의 참조변수로는 CaptionTv의 인스턴스 중, Tv클래스의 멤버들(상속받은 멤버 포함)만 사용할 수 있다.
참조변수의 타입이 참조하고 있는 인스턴스에서 사용할 수 있는 멤버의 개수를 결정한다.

참조변수의 형변환
자손타입 → 조상타입 [Up-casting] : 형변환 생략가능
자손타입 ← 조상타입 [Down-casting] : 형변환 생략불가
** 상속관계에 있는 클래스간에만 형변환이 가능
대입연산(=)이 수행되기 전 형변환을 수행하여 두 변수간 타입을 맞춰주어야 한다.
자손타입의 참조변수를 조상타입의 참조변수에 할당할 경우 형변환을 생략할 수 있다.
형변환은 ‘참조변수의 타입’을 변환하는 것이지, ‘인스턴스’ 자체를 변환하는 것이 아니기 때문에, 인스턴스에 아무런 영향을 미치지 않는다.
단, 형변환을 통해서, 참조하고 있는 인스턴스에서 사용할 수 있는 멤버의 범위(개수)를 조절하는 것 뿐이다.
“서로 상속관계에 있는 타입간의 형변환은 양방향으로 자유롭게 수행될 수 있으나, 참조변수가 가리키는 인스턴스의 자손타입으로 형변환은 허용되지 않는다. 그래서 참조변수가 가리키는 인스턴스 타입이 무엇인지 확인하는 것이 중요하다.”

instanceof 연산자
참조변수가 참조하고 있는 인스턴스의 실제 타입을 알아보기 위해 사용
참조변수 instanceof 타입(클래스명)
검사결과로 true시 변환 가능


참조변수와 인스턴스의 연결
<조상타입의 참조변수와 자손타입의 참조변수에서의 차이점>
조상클래스 변수명 = 자손클래스 변수명 일 때, 서로 다른 결과를 얻는다.
메서드 : 항상 실제 인스턴스의 메서드(오버라이딩된 메서드)가 호출
멤버변수 : 참조변수의 타입에 따라 달라진다.
→ 조상타입의 참조변수 사용 : 조상클래스에 선언된 멤버변수 사용
→ 자손타입의 참조변수 사용 : 자손클래스에 선언된 멤버변수 사용 

매개변수의 다형성
메서드의 매개변수로 자손타입의 참조변수를 받아들일 수 있다.

여러 종류의 객체를 배열로 다루기
조상타입의 참조변수 배열을 사용 → 공통 조상 가진 다른종류 객체를 배열로 묶을 수 있다.
조상타입의 참조변수로 자손타입의 객체를 참조하는 것이 가능하기 때문이다.
Vector 클래스 : 동적으로 크기가 관리되는 객체배열



6. 추상 클래스
추상클래스란?
미완성 설계도(미완성 메서드 포함)
선언방법 : ‘abstract’를 붙여준다.
예)
abstract class 클래스이름 {
}

추상메서드
선언부만 있는 메서드
기존에 있는 메서드를 공통부분으로 뽑아 추상메서드를 만들기도 한다.
예)
/* 주석으로 어떤 기능 목적의 메서드인지 설명한다. */
abstract 리턴타입 메서드이름();
자손클래스는 모든 추상메서드를 오버라이딩하여 구현해야만 한다.
상속받은 추상메서드 중 하나라도 빠진다면, 자손클래스 역시 추상클래스로 지정하여야 한다.
추상메서드를 선언하는 이유?
자손클래스에서 추상메서드를 반드시 구현하도록 강요하기 위해서이다.

추상클래스의 작성
추상화란, 구체화의 반대 의미
추상화 : 클래스간의 공통점을 찾아내서 공통의 조상을 만드는 작업
구체화 : 상속을 통해 클래스를 구현하고 확장하는 작업
[추상클래스는 구체화된 코드보다 유연하다]
추상클래스도 생성자가 있어야 한다.
아무런 내용 없이 단지 괄호 {} 만 있어도, 추상메서드가 아닌 일반메서드로 간주된다.

예) p.380 예제 작성

7. 인터페이스
인터페이스란?
일종의 추상클래스이다.
오직 추상메서드와 상수만을 멤버로 가질 수 있다
(그 이외의 어떤 다른 요소도 허용되지 않음)
인터페이스를 통해 다중상속과 같은 효과를 낼 수 있다.
[다중상속은 충돌문제가 있으나 인터페이스를 통해 해소]
다른 클래스에 도움을 줄 목적으로 작성된다.
추상클래스와 다른점?
몸통을 갖춘 일반메서드 또는 멤버변수를 구성원으로 가질 수 없다.

인터페이스의 작성
키워드로 class 대신 interface를 작성
접근제어자로 public 또는 default를 사용할 수 있다.
인터페이스를 작성할 때
1. 모든 멤버변수는 public static final이어야 하며, 생략할 수 있다.
2. 모든 메서드는 public abstract이어야 하며, 생략할 수 있다.
(단, static메서드와 디폴트 메서드는 예외(JDK1.8부터))
생략시, 컴파일러가 자동으로 추가해 준다.
예)
interface 인터페이스이름 {
public static final 타입 상수이름 = 값;
public abstract 메서드이름(매개변수목록);
}


인터페이스의 상속 
인터페이스는 인터페이스로부터만 상속받을 수 있다.
(클래스와 달리) 다중상속이 가능하다.


인터페이스의 구현
인터페이스는 [상속] 대신 [구현]이라는 단어 사용
인터페이스 자체로는 인스턴스를 생성할 수 없다.
오버라이딩할 때는 조상메서드보다 넓은 범위의 접근제어자를 사용할 수 없다.

인터페이스를 이용한 다중상속
자바는 다중상속을 허용하고 있지 않기 때문에 인터페이스를 통해 다중상속을 구현할 수 있는 것 뿐, 인터페이스의 참 역할은 아니며 자주 사용하지도 않는다.
두 개의 클래스로부터 상속을 받아야 할 상황이라면?
1. 비중이 높은 쪽을 조상클래스로 선택하고, 다른 한 쪽은 클래스 내부에 멤버로 포함시킨다.
2. 한 쪽의 필요한 부분을 뽑아서 인터페이스로 만든 다음 구현한다.
교재 예시 모두 적기.

인터페이스를 이용한 다형성
인터페이스는 메서드의 매개변수 타입으로 사용될 수 있다.
→ 메서드 호출 시 해당 인터페이스를 구현한 클래스의 인스턴스를 매개변수로 제공해야 한다.
메서드의 리턴타입으로 지정 가능하다.
→ 메서드가 해당 인터페이스를 구현한 클래스의 인스턴스를 반환해야 한다.
서버측의 변경만으로도 사용자가 개정된 프로그램을 사용할 수 있도록 해준다.
예제 넣기

인터페이스의 장점
1. 개발시간을 단축시킬 수 있다.
2. 표준화가 가능하다.
3. 서로 관계없는 클래스들에게 관계를 맺어줄 수 있다.
4. 독립적인 프로그래밍이 가능하다.
특정 데이터베이스에 종속되지 않는 프로그램을 작성할 수 있다.
** 상속관계에서 공통점이 없는 자손클래스에 공통된 기능을 구현하고 싶을 때 사용

인터페이스의 이해
인터페이스란 도대체 무엇일까?
1. 클래스를 사용하는 쪽(User)과 클래스를 제공하는 쪽(Provider)이 있다.
2. 메서드를 사용(호출)하는 쪽(User)에서는 사용하려는 메서드(Provider)의 선언부만 알면 된다.(내용은 몰라도됨)
** 직접적인 관계의 두 클래스는 한쪽(Provider)이 변경되면 다른 한 쪽(User)도 변경되어야 한다.
→ 인터페이스 → 변경에 영향 받지 않는다.
직접적인 관계 → 간접적인 관계
클래스는 직접 관계되는 인터페이스의 영향만 받는다.


디폴트 메서드와 static 메서드
디폴트 메서드
추상 메서드의 기본적인 구현을 제공하는 메서드
→ 추상 메서드가 아님
→ 디폴트 메서드가 추가되어도 해당 인터페이스를 구현한 클래스를 변경하지 않아도 된다.
⇒ 조상 클래스에 새로운 메서드를 추가한 것과 동일한 효과
[1. 여러 인터페이스의 디폴트 메서드 간의 충돌
→ 인터페이스를 구현한 쪽에서 디폴트 메서드를 오버라이딩 해야한다.
2. 디폴트 메서드와 조상 클래스의 메서드 간의 충돌
→ 조상클래스의 메서드가 상속되고, 디폴트 메서드는 무시된다.]


작성 방법
앞에 키워드 default를 붙인다.
몸통 {} 이 있어야 한다.
접근제어자는 public, 생략 가능

8. 내부 클래스(inner class)
내부 클래스란?
클래스 내에 선언된 클래스
두 클래스 간 관계가 긴밀할 때 내부 클래스 작성
장점
1. 내부 클래스에서 외부 클래스의 멤버들을 쉽게 접근
2. 코드의 복잡성을 줄일 수 있다.(캡슐화)
내부 클래스는 외부 클래스를 제외한 다른 클래스에서는 잘 사용되지 않아야 한다.

내부 클래스의 종류와 특징
변수가 선언위치에 따라 종류가 달라지듯 내부 클래스도 마찬가지다.
1. 인스턴스 클래스
외부클래스의 멤버변수 선언위치에 선언, 외부 클래스의 인스턴스멤버처럼 다루어진다. 주로 외부 클래스의 인스턴스멤버들과 관련된 작업에 사용될 목적
2. 스태틱 클래스
외부클래스의 멤버변수 선언위치에 선언, 외부클래스의 static멤버처럼 다루어진다. 주로 외부클래스의 static멤버, 특히 static메서드에서 사용될 목적
3. 지역 클래스
외부클래스의 메서드나 초기화블럭 안에 선언, 선언영역 내에서만 사용가능
4. 익명 클래스
클래스의 선언과 객체의 생성을 동시에 하는 이름 없는 클래스 (일회용)


내부 클래스의 선언
변수와 마찬가지로 선언위치에 따른 동일한 유효범위와 접근성을 가진다.

내부 클래스의 제어자와 접근성
abstract나 final 사용 가능 (like 클래스)
privatem, protected 사용 가능 (like 멤버변수)
내부클래스 중 static클래스만 static멤버를 가질 수 있다.
final과 static이 동시에 붙은 변수는 상수이므로 모든 내부클래스에서 사용 가능
내부클래스와 외부클래스에서 선언된 변수 이름이 같을 땐?
변수 앞에 ‘this’ 아니면 ‘외부클래스명.this’를 붙여 서로 구분한다.

익명 클래스(anonymous class)
이름 없는 클래스
클래스의 선언 + 객체 생성 동시에 한다.
단 한번만 사용될 수 있다.
오직 하나의 객체만을 생성하는 일회용 클래스
조상클래스의 이름 or 구현하고자 하는 인터페이스의 이름을 사용해서 정의
→ 하나의 클래스로 상속받으면서 인터페이스 구현할 수 없다.
예) new 조상클래스이름() {
//멤버선언
}
or
new 구현인터페이스이름() {
//멤버선언
}
생성자 가질 수 없다.
클래스파일명은 ‘외부클래스명$숫자.class’의 형식
