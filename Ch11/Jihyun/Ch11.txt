11장 컬렉션 프레임웍
데이터군을 저장하는 클래스들을 표준화한 설계
컬렉션(Collection) : 다수의 데이터, 데이터 그룹
프레임웍 : 표준화된 프로그래밍 방식

1.1 컬렉션 프레임웍의 핵심 인터페이스
p.578
[List] 순서O 중복O / 구현클래스 : ArrayList, LinkedList, Stack, Vector
[Set] 순서X 중복X / 구현클래스 : HashSet, TreeSet
[Map] 순서X 키중복X 값중복O / 구현클래스 : HashMap, TreeMap, Hashtable, Properties

컬렉션 프레임웍의 모든 컬렉션 클래스들은 List, Set, Map 중의 하나를 구현하고 있다.
Vector, Stack, Hashtable, Properties와 같은 클래스들은 컬렉션 프레임웍이 만들어지기 이전부터 존재했기 때문에 명명법이 다른 것

p. 579 이미지

- Collection 인터페이스 p.580
- List 인터페이스 p.581
- Set 인터페이스 p.581
- Map 인터페이스 p.582
- Map.Entry 인터페이스 p.583


1.2 ArrayList
가장 많이 사용되는 컬렉션 클래스
List인터페이스 구현 → 데이터의 저장 순서 유지, 중복 허용
Object배열을 이용하여 데이터를 순차적으로 저장
배열에 더 이상 저장공간이 없으면 부족할 때마다 새로운 배열을 생성해서 기존 배열에 저장된 내용을 새로운 배열로 복사한 다음 저장된다.

1.3 LinkedList
 불연속적으로 존재하는 데이터를 서로 연결한 형태로 구성
이동방향이 단방향이므로 다음 요소 접근은 쉽고, 이전 요소 접근은 어려움
→ 더블 링크드 리스트(이중 연결리스트, doubly linked list)
순차적으로 추가/삭제하는 경우 ArrayList가 LinkedList보다 빠르다.
중간 데이터를 추가/삭제하는 경우 LinkedList가 ArrayList보다 빠르다.
접근시간(access time) - ArrayList가 빠르다
[인덱스가 n인 데이터의 주소 = 배열의 주소 + n * 데이터 타입의 크기]

1.4 Stack과 Queue
스택 활용의 예
수식 계산, 수식괄호검사, 워드프로세서의 undo/redo 웹브라우저의 뒤로/앞으로
큐의 활용 예
최근사용문서, 인쇄작업 대기목록, 버퍼(buffer)


1.5 Iterator, ListIterator, Enumeration
컬렉션에 저장된 데이터를 접근하는데(읽어오기) 사용되는 인터페이스
Enumeration : Iterator의 구버젼
ListIterator : Iterator의 접근성을 향상시킨 것 (단방향 -> 양방향)
Iterator만 제대로 알자!

Iterator의 핵심 
Iterator()는 Collection 인터페이스에 정의된 메서드다. 따라서 Collection 인터페이스의 자손인 List, Set에도 포함되어 있다.
사용시 컬렉션 종류(List, Set, Map) 및 구조에 상관없다.
1. 확인하기 (boolean hasNext())
2. 읽기 (Object next())
장점 : 사용하는 쪽이 편하다. 읽어올 때만 1,2로 신경쓰면 되므로

Map과 Iterator
Map에는 Iterator()가 없다.
Set keySet() / Set entrySet() / Collection values() 이용하여 Set이나 Collection을 얻은 후에 거기서 호출해야함.

1.6 Arrays

배열을 다루는 데 비슷한 메서드(static)가 정의되어 있다. 
[Math / Objects / Collections 도 비슷한 역할]

배열의 출력 - toString()
배열의 복사 - copyOf(), copyOfRange()
배열 채우기 - fill(), setAll()
배열의 정렬과 검색 - sort(), binarySearch()
배열의 비교와 출력 - equals(), toString()
다차원 배열의 출력 - deepToString()
다차원 배열의 비교 - deepEquals()
배열을 List로 변환 - asList(Object… a) [읽기전용]
parallelXXX(), spliterator(), stream() - 람다와 스트림 관련(14장)


1.7 Comparator와 Comparable


객체 정렬에 필요한 메서드(정렬기준 제공)를 정의한 인터페이스

* Comparable 기본정렬기준 구현(default)
* Comparator 기본정렬 외 다른 기준으로 정렬하고자 할 때


1.8 HashSet

- Set인터페이스를 구현한 대표적 Collection Class
- 순서X, 중복X
- 순서를 유지하려면 LinkedHashSet 클래스를 사용하면 된다.

주요 메서드 p.631

1.객체를 저장하기 전에 기존에 같은 객체가 있는지 확인
2.같은 객체가 없으면 저장하고, 있으면 저장하지 않는다.
boolean add(Object o)는 저장할 객체의 equals()와 hashCode()를 호출 —> 둘 다 오버라이딩 되어있어야 함.

** 오버라이딩된 hashCode()는 다음의 세 가지 조건을 만족시켜야 한다.
1.실행중인 애플리케이션 내의 동일한 객체에 대해서 여러 번 hashCode()를 호출해도 동일한 int값을 반환해야 한다. 그러나 실행시마다 동일한 int값을 반환할 필요는 없다 (단, equals메서드의 구현에 사용된 멤버변수의 값이 바뀌지 않았다고 가정할 때)

2.equals메서드를 이용한 비교에 의해 true를 얻은 두 객체에 대해 각각 hashCode()를 호출해서 얻은 결과는 반드시 같아야 한다.

3.equals메서드를 호출했을 때 false를 반환하는 두 객체는 hashCode()호출에 대해 같은 int값을 반환하는 경우가 있어도 괜찮지만, 해싱(hashig)을 사용하는 컬렉션의 성능을 향상시키기 뒤해서는 다른 int값을 반환하는 것이 좋다.

1.9 TreeSet
- 범위검색(from~to)과 정렬에 유리
- (트리가 커질수록) HashSet보다 데이터 추가, 삭제에 시간이 더 걸림
- 이진탐색트리(binary search tree)로 구현
- 이진트리는 모든 노드가 최대 2개인 하위 노드를 가진다.
- LinkedList처럼 여러개의 노드(node)가 서로 연결된 구조
- 중복된 값을 저장하지 못한다.

* 이진탐색트리(이진검색트리)
부모노드의 왼쪽에는 부모노드보다 작은 값, 오른쪽에는 큰 값을 저장
데이터가 많아질수록 추가/삭제 시간이 늘어난다.

- 트리순회
: 이진 트리의 모든 노드를 한번씩 읽는 것 - 전위순회, 중위순회, 후위순회, 레벨순회
: 중위 순회하면 오름차순으로 정렬된다.

1.10 HashMap과 HashTable
- Map 인터페이스를 구현. 데이터를 키와 값의 쌍으로 저장
- 순서X, 중복(키X,값O)
- HashMap(동기화X)은 Hashtable(동기화O)의 신버젼

* HashMap
: Map인터페이스를 구현한 대표적 컬렉현 클래스
순서를 유지하려면 LinkedHashMap클래스를 사용하면 된다.
해싱 기법으로 데이터를 저장 - 데이터가 많아도 검색이 빠르다.

** 해싱 (hashing)
- 해시함수(hash function)로 해시테이블(hash table)에 데이터를 저장, 검색
- 해시테이블은 배열(접근성)과 링크드리스트(변경유리)가 조합된 형태
→ 분류해서 묶어놓은 것을 배열에 정리한 것
- 해시테이블에 저장된 데이터를 가져오는 과정
1. 키로 해시함수를 호출해서 해시코드를 얻는다.
2. 해시코드(해시함수의 반환값)에 대응하는 링크드리스트를 배열에서 찾는다.
3. 링크드리스트에서 키와 일치하는 데이터를 찾는다.
(해시함수는 같은 키에 대해 항상 같은 해시코드를 반환해야 한다. 서로 다른 키일지라도 같은 값을 해시코드를 반환할 수도 있다.)




1.11 TreeMap
: 범위 검색과 정렬에 유리한 컬렉션 클래스
HashMap보다 데이터 추가, 삭제에 시간이 더 걸림

1.12 Collections
컬렉션과 관련도니 유용한 메서드 제공(모두 static)
Objects, Arrays, Collections 모두 같은 계열
컬렉션의 동기화 / 변경불가 컬렉션 만들기 / 싱글톤 컬렉션 만들기 / 한 종류의 객체만 저장하는 컬렉션 만들기


1.13 컬렉션 클래스 정리 & 요약
교재 페이지 668 그림 참고
