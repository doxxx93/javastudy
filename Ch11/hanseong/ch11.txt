============================== [ 11장 컬렉션 프레임웍 (Collection Framework) ] ==============================

[ 1. 컬렉션 프레임웍(Collections Framework) ]
	* 컬렉션 프레임웍이란?
		// 다수의 객체(컬렉션)를 다루기 위한 표준화된 프로그래밍 방식

	* 컬렉션, 다수의 데이터를 다루는데 필요한 다양하고 풍부한 클래스를 제공하여 프로그래머의 짐을 상당히 덜어 주고 있다

	* 인터페이스와 다형성을 이용한 객체지향적 설계를 통해 표준화되어 있기 때문에 사용법을 익히기에 편리하고 재사용성이 높은 코드를 작성할 수 있다

=======================================================================================================

[ 1.1 컬렉션 프레임웍의 핵심 인터페이스 ]
	* 컬렉션데이터 그룹이 크게 3가지로 존재하고, 각 컬렉션을 다루는데 필요한 기능을 가진 3가지의 인터페이스를 정의하였다.
		// List(목록), Set(집합), Map(키,값)
			- List와 Set의 공통된 부분을 뽑아서 인터페이스 Collection을 추가로 정의 했다.
			- Map인터페이스는 전혀 다른 형태로 컬렉션을 다루기 때문에 포함되지 못했다

	* 컬렉션 프레임웍의 인터페이스 목록
		1. List	// 특징 : 순서가 있고, 데이터 중복을 허용
	
		2. Set	// 특징 : 순서가 없고, 데이터 중복을 허용하지 않는다

		3. Map 	// 특징 : 키와 값의 쌍으로 이루어진 데이터 집합, 순서가 없고, 키는 중복을 허용하지 않고, 값은 중복을 허용

	* 실제 개발 시 다루고자 하는 컬렉션의 특징을 파악하고 어떤 인터페이스를 구현한 컬렉션 클래스를 사용해야하는지 결정해야하므로
	  각 인터페이스의 특징과 차이를 잘 이해하고 있어야 한다.

[ 1.1_1 Collection Framework 인터페이스의 주요 기능과 메서드 ]
	1. Collection 인터페이스
		* list와 set 인터페이스의 공통된 부분을 인터페이스로 만들었다

		* 컬렉션 클래스에 저장된 데이터를 읽고, 추가하고 삭제하는 등 컬렉션을 다루는데 가장 기본적인 메서드를 정의하고 있다.
		
	2. List 인터페이스
		* 중복을 허용하면서, 저장순서가 유지되는 컬렉션을 구현하는데 사용된다
			// List 인터페이스를 구현한 대표적인 클래스
				- ArrayList, LinkedList

	3. Set 인터페이스
		* 중복을 허용하지 않고 저장순서가 유지되지 않는 컬렉션 클래스를 구현하는데 사용
			// Set 인터페이스를 구현한 대표적인 클래스
				- HashSet, TreeSet

	4. Map 인터페이스
		* 키와 값을 하나의 쌍으로 묶어서 저장하는 컬렉션 클래스를 구현하는데 사용
			// Map 인터페이스를 구현한 대표적인 클래스
				- HashMap, TreeMap
		
		* 키는 중복될 수 없지만 값은 중복을 허용한다
			// 중복된 키와 값을 저장하면 기존의 값은 없어지고 마지막에 저장된 값이 남게 된다.

	4.1 Map.Entry 인터페이스
		* Map인터페이스의 내부 인터페이스

		* Map에 저장되는 key-value쌍을 다루기 위해 내부적으로 정의되어있는 Entry인터페이스
			// 보다 객체지향적으로 설계하도록 유도하기 위한 것
			// Map인터페이스를 구현하는 클래스에서는 Map.Entry인터페이스도 함께 구현해야한다.

=======================================================================================================

[ 1.2 ArrayList ]
	* 컬렉션 프레임웍에서 가장 많이 사용되는 컬렉션 클래스

	* List인터페이스를 구현하기 때문에 데이터의 저장순서가 유지되고 중복을 허용한다

	* Vector와 구현원리와 기능적인 측면에서 동일하다
		// Vector는 기존에 작성된 소스와의 호환성을 위해 남겨 두고 있을 뿐이다
		// 가능하면 Vector보다 ArrayList 사용

	* ArrayList는 Object배열을 이용해서 데이터를 순차적으로 저장한다
		// 더 이상 저장할 공간이 없으면 큰 배열을 생성하여 저장된 내용을 복사한 다음 저장된다
			- 시간이 오래 걸린다(미리 적절한 배열 크기를 정해야한다)

	* 선언된 배열의 타입이 모든 객체의 최고조상인 Object이기 때문에 모든 종류의 객체를 담을 수 있다
		// if(모든 종류의 참조변수 instanceof Object) 
			- true

	* ArrayList, Vector의 장단점
		1. 장점 : 데이터를 읽어오고 저장하는데 효율이 좋다
		2. 단점 : 용량을 변경해야할 경우 새로 생성된 배열로 데이터를 복사해야하기 때문에 효율이 떨어진다

	* Explain1_2_1, Explain1_2_2
	* Vector클래스 용량, 사이즈 비교
		// Explain1_2_3

[ 1.2_1 List 인터페이스의 remove() 메서드 뜯어보기 ]
	* Explain1_2_4

=======================================================================================================

[ 1.3 LinkedList ]
	* 배열의 단점을 보완하기 위해서 고안된 자료구조
		// 배열의 장단점
			- 장점	1. 구조가 간단하다
				2. 사용하기 쉽고 데이터를 읽어오는데 걸리는시간이 가장 빠르다

			- 단점	1. 크기를 변경할 수 없다
				2. 비순차적인 데이터의 추가 또는 삭제에 시간이 많이 걸린다.
					- 중간에 데이터를 추가 삭제하려면 시간이 걸린다

	* 링크드 리스트는 불연속적으로 존재하는 데이터를 서로 연결(link)한 형태로 구성되어 있다
	
	* 링크드 리스트에서 데이터 삭제(간단)
		// 삭제하고자 하는 요소의 이전요소가 삭제하고자 하는 요소의 다음 요소를 참조하도록 변경하면 된다
			- 참조변경(단 하나의 참조만 변경하면 삭제가 이루어진다)
			
		// 데이터를 이동하기 위해 복사하는 과정이 없기 때문에 처리속도가 매우 빠르다

	* 링크드 리스트에서 새로운 데이터 추가
		// 1. 새로운 요소 생성
		   2. 추가하고자 하는 위치의 이전요소의 참조를 새로운 요소에 대한 참조로 변경
		   3. 새로운 요소가 그 다음 요소를 참조하도록 변경

	* 링크드 리스트의 종류와 특징
		1. 링크드 리스트 
			// 이동방향 : 단방향
			// 특징 : 다음 요소에 대한 접근은 쉽지만 이전요소에 대한 접근은 어려움

		2. 더블 링크드 리스트
			// 이동방향 : 양방향
			// 특징 :	1. 링크드 리스트에 참조변수를 하나 더 추가한 자료구조
				2. 다음요소에 대한 참조뿐 아니라 이전 요소에 대한 참조가 가능하다
					- 그 외에는 링크드 리스트와 같다

			// 각 요소에 대한 접근과 이동이 쉽기 때문에 링크드 리스트보다 더 많이 사용된다

		3. 더블 써큘러 링크드 리스트
			// 이동방향 : 원형
			// 특징 :	1. 더블 링크드 리스트의 접근성을 향상시킨 자료구조
				2. 마지막요소의 다음요소가 첫번째 요소가 되고, 첫번째 요소의 이전요소가 마지막 요소가 된다
					- 돌고 돈다

	* 실제 LinkedList클래스는 더블 링크드 리스트로 구현되어 있다
		// 링크드 리스트의 단점인 낮은 접근성을 높히기 위해

	* ArrayList와 LinkedList 비교
		// 순차적으로 추가/삭제하는 경우에는 ArrayList가 더 빠르다

		// 중간 데이터를 추가/삭제하는 경우에는 LinkedList가 더 빠르다

		// 결론
			- 다루고자 하는 데이터의 개수가 변하지 않는 경우? ArrayList
			- 데이터 개수의 변경이 잦다면? LinkedList

	* 배열에서 인덱스가 n인 요소의 값을 구하는 계산방법
		// 인덱스가 n인 데이터의 주소 = 배열의 주소 + n * 데이터 타입의 크기

=======================================================================================================

[ 1.4 Stack과 Queue ]
	* Stack : 마지막에 저장한 데이터를 가장 먼저 꺼내게 되는 LIFO(Last In First Out)구조
		// 자바에서는 Stack을 클래스로 구현하여 제공한다

	
	* Queue : 처음에 저장한 데이터를 가장 먼저 꺼내게 되는 FIFO(First In First Out)구조
		// 자바에서는 Queue를 인터페이스로 정의되어 있다
			- Queue를 구현한 대표 클래스 : LinkedList

	
[ 1.4-1 스택과 큐의 활용 ]
	* 스택의 활용 예 : 수식계산, 수식괄호검사
	
	* 큐의 활용 예 : 최근사용문서, 버퍼(buffer)

	* 스택과 큐는 실제 프로그래밍에서 빈번하게 사용되는 자료구조

[ 1.4-2 PriorityQueue ]
	* Queue인터페이스의 구현클래스 중의 하나이다

	* 특징
		1. 저장한 순서에 관계없이 우선순위(priority)가 높은 것부터 꺼내게 된다
		2. null은 저장할 수 없다
			// null을 저장하면 NullPointerException이 발생
		3. 저장공간으로 배열을 사용하고 각 요소를 Heap이라는 자료구조의 형태로 저장
			// JVM의 heap메모리와 이름만 같은것이다

	* 우선순위?
		// 숫자가 작을수록 우선순위가 높다

		// 객체를 저장할 경우 각 객체의 크기를 비교할 수 있는 방법을 제공해야 한다.

[ 1.4-3 Deque(Double-Ended Queue)
	* Queue의 변형

	* 한 쪽 끝으로만 추가/삭제 할 수 있는 Queue와 달리 Deque은 양쪽 끝에서 추가/삭제가 가능하다
	
	* Deque의 조상은 Queue, 구현클래스는 ArrayDeque과 LinkedList 등이 있다

=======================================================================================================

[ 1.5 Iterator, ListIterator, Enumeration ]
	* 컬렉션에 저장된 요소를 접근하는데 사용되는 인터페이스
		// Enumeration은 Iterator의 구버전이고, ListIterator는 Iterator의 기능을 향상시킨것

[ 1.5-1 Iterator ]
	* 컬렉션에 저장된 요소들을 읽어오는 방법을 표준화 한것
	
	* 컬렉션에 저장된 각 요소에 접근하는 기능을 가진 Iterator인터페이스를 정의하고, Collection인터페이스에는 'Iterator'를
	  반환하는 iterator()를 정의하고 있다

	* iterato()는 Collection인터페이스에 정의된 메서드이므로 Collection인터페이스의 자손인 List Set에도 포함되어 있다
		// 컬렉션 클래스에 대해 iterator()를 호출하여 Iterator를 얻은 다음 반복문(while)을 사용하여 요소들을 읽어올수 있다
			- Iterator iter = list.iterator();
			- while(iter.hasNext()){ System.out.println(iter.next()); }

	* Map인터페이스를 구현한 클래스는 키와 값을 쌍으로 저장하고 있기 때문에 iterator()를 직접 호출할 수 없고, 대신 keySet()이나
	  entrySet()과 같은 메서드를 통해서 키와 값을 각각 따로 Set의 형태로 얻어 온 후 iterator()를 호출해야 Iterator를 얻어올 수 있다
		// Iterator iter = map.keySet().iterator();
		// while(iter.hasNext()){ System.out.println(iter.next);

[ 1.5-2 ListIterator ]
	* Iterator을 상속받아서 기능을 추가한 것
		// Iterator은 단방향으로만 이동할 수 있지만 ListIterator은 양방향으로 이동이 가능하다
			- ListIterator listIter = list.listIterator();
			- while(listIter.hasPrevious()){ System.out.println(listIter.previous(); }

		// 이동하기 전에 반드시 hasNext()나 hasPrevious()를 호출해서 이동할 수 있는지 확인해야한다.

=======================================================================================================

[ 1.6 Arrays클래스 ]
	* 배열을 다루는데 유용한 메서드가 정의되어 있다.
		// 모두 static메서드이다
			- Arrays.toString(배열);

 1. 배열의 복사 copyOf(), copyOfRange()
	* copyOf(배열)는 배열 전체 복사
		//반환타입은 배열

	* copyOfRange(배열,0, 5)는 배열의 일부 범위를 복사
		// 반환타입은 배열이고, 0부터 4까지 복사한다
			- 마지막 숫자는 포함 X

 2. 배열 채우기 fill(), setAll()
	* fill()은 배열의 모든 요소를 지정된 값으로 채운다.
		// int[] arr = new int[5];
		// Arrays.fill(arr, 6);
			- 5개의 요소가 모두 6으로 저장된다

	* setAll()은 배열을 채우는데 사용할 함수형 인터페이스를 매개변수로 받는다.
		// 14장 람다와 stream

 3. 배열의 정렬과 검색 sort(), binarySearch()
	* sort()는 배열을 정렬할 때 사용된다
		// Arrays.sort(배열);

	* binarySearch()는 배열에서 저장된 값이 저장된 위치(index)를 찾아서 반환한다
		// 이진탐색이므로 무조건 sort()가 먼저 선행되어야 한다
			- 이진탐색이란 정렬되있는 배열의 중간을 탐색하려는 값과 계속 비교하면서 위치를 찾아가는 방법
				! 절반씩 줄여가면서 검색하기때문에 검색속도가 빠르고 큰 배열의 검색에 유리하다

		// int index = Arrays.binarySearch(배열, 2);
			- 2가 어느 위치에 있나?

 4. 배열의 비교와 출력 equals(), toString()
	* toString()은 배열의 모든 요소를 문자열로 편하게 출력하는 메서드
		// Arrays.toString(배열);
		// 다차원배열을 출력할때는 deepToString()을 사용해야한다
			- Arrays.deepToString(다차원배열);
		
	* equals()은 배열에 저장된 요소를 비교하는 메서드 true false를 반환한다
		// Arrays.equals(배열1, 배열2);

		// 다차원배열의 경우 deepEquals()를 사용해야한다
			- Arrays.deepEquals(다차원배열1, 다차원배열2);

 5. 배열을 List로 변환해주는 asList(Object... a)
	* asList()는 배열을 List에 담아서 반환하는 메서드
		// 읽기 전용
		// 매개변수의 타입이 가변인수라 배열생성없이 요소를 나열만해도 가능

	* 주의할점
		// asList()가 반환한 List의 크기를 변경할 수 없다
			- 추가, 삭제가 불가능
			- 저장된 내용만 변경가능

		// 크기를 변경할 수 있는 List를 반환받으려면?
			- List list = new ArrayList(Arrays.asList(Object... a));
			- list.add(3); 가능 
		
=======================================================================================================

[ 1.7 Comparator와 Comparable ]
	* Arrays.sort()를 호출하면 Character클래스의 Comparable의 구현에 의해 정렬이 된다
		// Comparator와 Comparable은 인터페이스로 컬렉션을 정렬하는데 필요한 메서드를 정의하고 있다

	* Comparable을 구현하고 있는 클래스의 종류와 특징
		// 같은 타입의 인스턴스끼리 서로 비교할 수 있는 클래스들
		// 종류 : Integer와 같은 wrapper클래스와 String, Date, File과 같은 것들
			- 기본적으로 오름차순, 즉 작은 값에서부터 큰 값의 순으로 정렬되도록 구현되어 있다.

	* Comparable을 구현한 클래스들이 기본적으로 오름차순으로 정렬되어 있지만, 내림차순으로 정렬한다던가 아니면 다른 기준에 의해서
	  정렬되도록 하고 싶을 때 Comparator를 구현해서 정렬기준을 제공할 수 있다.
		// Comparable : 기본 정렬기준을 구현하는데 사용
		// Comparator : 기본 정렬기준 외에 다른 기준으로 정렬하고자할 때 사용

=======================================================================================================

[ 1.8 HashSet ]
	* Set인터페이스를 구현한 가장 대표적인 컬렉션
		// 중복된 요소를 저장하지 않는다.
			- 중복된 요소를 저장하면 false를 반환하고 저장되지 않는다

	* HashSet은 저장순서를 유지하지 않으므로 저장순서를 유지하고자 한다면 LinkedHashSet을 사용해야한다
		// 저장순서를 유지하지 않기 때문에 저장한 순서와 다를 수 있다.

	* Set인터페이스에서의 정렬(sort(List list))
		// List인터페이스를 구현한 LinkedList의 생성자중 Collection인터페이스를 매개변수로 받는 생성자를 사용하여
		   HashSet에 있던 요소들을 LinkedList로 옮긴다음 정렬을 하면 된다

	* Set인터페이스를 구현한 클래스에서 add(Object a) 메서드를 이용할 때 주의사항
		// 기본형뿐만 아니라 참조형 인자도 넣을 수 있다. Set인터페이스는 중복을 허용하지 않기 때문에 add()메서드를 호출하면
		   새로운 요소를 추가하기 전에 기존에 저장된 요소와 같은 것 인지 판별하기 위해 추가하려는 요소의 equals()와 
		   hashCode()를 목적에 맞게 오버라이딩해야 한다.

	* Explain1_8_1

	* Set인터페이스의 메서드 addAll, retainAll, removeAll을 이용해 합집합, 교집합, 차집합을 구할 수 있다.

=======================================================================================================

[ 1.9 TreeSet ]
	* 이진 검색 트리(binary search tree)라는 자료구조의 형태로 데이터를 저장하는 컬렉션 클래스
		// 이진검색트리는 정렬, 검색, 범위검색에 높은 성능을 보이는 자료구조이다

	* TreeSet은 이진 검색 트리의 성능을 향상시킨 '레드-블랙 트리(Red-Black tree)'로 구현되어 있다

	* Set인터페이스를 구현했으므로 중복되 데이터의 저장을 허용하지 않으며 정렬된 위체에 저장하므로 저장순서를 유지하지도 않는다.

	* 이진 트리는 링크드리스트처럼 여러 개의 노드가 서로 연결된 구조이다
		// 루트라고 불리는 하나의 노드에서부터 시작해서 계속 확장해 나갈 수 있다
			- 위의 노드를 부모노드, 아래의 노드를 자식노드라 한다
				! 하나의 부모 노드는 최대 두 개의 자식 노드와 연결될 수 있다

			- 부모노드의 왼쪽에는 부모노드보다 작은 값, 오른쪽은 큰 값을 저장하는것이 이진 트리이다

	* 트리는 데이터를 순차적으로 저장하는 것이 아니라 저장위치를 찾아서 저장해야하고, 삭제하는 경우 트리의 일부를 재구성해야하므로
	  데이터의 추가/삭제 시간은 더 걸린다. 
		// 대신 배열이나 링크드 리스트에 비해 검색과 정렬기능이 더 뛰어나다.
	
=======================================================================================================

[ 1.10 HashMap과 Hashtable ]
	* Hashtable과 HashMap은 Vector와 ArrayList의 관계와 같다
		// 새로운 버전인 HashMap 사용권장

	* HashMap은 Map의 특징, key와 value를 묶어서 하나의 데이터(entry)로 저장한다는 특징을 갖는다.

	* 해싱(hashing)을 사용하기 때문에 많은 양의 데이터를 검색하는데 있어서 뛰어난 성능을 보인다

	* HashMap의 내부구조
		// HashMap은 Entry라는 내부 클래스를 정의하고, 다시 Entry타입의 배열을 선언하고 있다
		
		// key와 value는 별개의 값이 아니라 서로 관련된 값이기 때문에 각각의 배열로 선언하기 보다는 클래스로 정의해서
		   하나의 배열로 다루는 것이 데이터의 무결성적인 측면에서 더 바람직하기 때문

	* HashMap은 키와 값을 각각 Object타입으로 저장한다
		// key : 컬렉션 내의 키 중에서 유일해야 한다
		// value : 키와 달리 데이터의 중복을 허용한다
			- ex) 아이디는 중복될 수 없다

	* Explain1_10_1

[ 1.10-1 해싱과 해시함수 ]
	* 해싱이란?
		// hash function을 이용해서 데이터를 hash table에 저장하고 검색하는 기법

	* 해시함수란?
		// 데이터가 저장되어 있는 곳을 알려주는 함수
			- 저장할 데이터의 키를 해시함수에 넣으면 배열의 한 요소를 얻게 되고, 다시 그 곳에 연결 되어 있는
			  링크드 리스트에 저장하게 된다

			- 다량의 데이터 중에서도 원하는 데이터를 빠르게 찾을 수 있다

	* 해싱을 구현한 컬렉션 클래스
		1. HashSet 2. HashMap 3.Hashtable .....

	* 해싱에서 사용하는 자료구조는 배열과 링크드 리스트의 조합으로 이루어져 있다
		// 배열에 각 요소에 링크드 리스트가 저장되어 있어서 실제 데이터는 링크드 리스트에 담겨지게 된다

	* HashMap에 저장된 데이터를 찾는 과정
		1. 검색하고자 하는 값의 키로 해시함수를 호출
		2. 해시함수의 계산결과(해시코드)로 해당 값이 저장되어 있는 링크드 리스트를 찾는다
		3. 링크드 리스트에서 검색한 키와 일치하는 데이터를 찾는다.

	* 링크드 리스트는 검색에 불리한 자료구조이기 때문에 링크드 리스트의 크기가 커질수록 검색속도가 떨어지게된다
		// 배열은 크기가 커져도 요소의 위치만 알면 빠르게 값을 찾을 수 있기 때문에 배열을 크게 하고 링크드리스트에 값은 하나씩 넣게되면
		   검색이 더 빨라진다
	
	* 해싱의 실제 사용
		// HashMap과 같이 해싱을 구현한 컬렉션 클래스에서는 Object클래스에 정의된 hashCode()를 해시함수로 사용

		// Object클래스에 정의된 hashCode()는 객체의 주소를 이용하는 알고리즘으로 해시코드를 만들기 때문에
		   모든 객체에 대해 hashCode()를 호출한 결과가 서로 유일한 훌륭한 방법이다

		// String클래스의 경우 상속받은 hashCode()를 오버라이딩해서 문자열의 내용으로 해시코드를 만들어 낸다.
			- 서로 다른 String인스턴스일지라도 같은 내용의 문자열을 가졌다면 hashCode()를 호출하면 같은 해시코드를 얻는다

		// 서로 다른 두 객체에 대해 equals()로 비교한 결과가 true인 동시에 hashCode()의 반환값이 같아야 같은 객체로 인식하기 때문에
		   새로운 클래스를 정의할 때 equals()를 오버라이딩해야한다면 hashCode()도 같이 오버라이딩해서 equals()의 결과가 true인 두 객체의
		   hashCode()의 결과값이 항상 같도록 해주어야 한다
			- 그렇지 않으면 HashMap과 같이 해싱을 구현한 컬렉션 클래스에서는 equals()의 호출결과가 true이지만 
			  해시코드가 다른 두 객체를 서로 다른 것으로 인식하고 따로 저장할 것이다
				! equals()로 비교한 결과가 false이고 해시코드가 같은 경우는 같은 링크드 리스트에 저장된 서로 다른 두 데이터가 된다.

=======================================================================================================

[ 1.11 TreeMap ]
	* 이진검색트리의 형태로 키와 값을 쌍의 땅으로 이루어진 데이터를 저장한다
		// 검색과 정렬에 적합한 컬렉션 클래스

	* 검색에 관한한 대부분의 경우 HashMap이 더 뛰어나다
		// 다만, 범위검색이나 정렬이 필요한 경우 TreeMap을 사용

=======================================================================================================

[ 1.12 Properties ]
	* HashMap의 구버전인 Hashtable을 상속받아 구현한 것
		// Hashtable은 키와 값을 (Object, Object)의 형태로 저장하는데, Properties는 (String, String)의 형태로 저장하는 보다 단순화된 컬렉션클래스이다.

	* 주로 애플리케이션의 환경설저오가 관련된 속성(property)을 저장하는데 사용되며 데이터를 파일로부터 일고 쓰는 편리한 기능을 제공
		// 간단한 입출력은 Properties를 활용하면 몇 줄의 코드로 쉽게 해결 가능

=======================================================================================================

[ 1.13 Collections ]
	* Arrays가 배열과 관련된 메서드를 제공하는 것처럼, Collections는 컬렉션과 관련된 메서드를 제공
		// fill(), copy(), sort(), binarySearch() 등의 메서드는 두 클래스에 모두 포함되어있고 같은 기능을 한다

[ 1.13-1 컬렉션의 동기화 synchronized]
	* 멀티 쓰레드 프로그래밍에서는 하나의 객체를 여러 쓰레드가 동시에 접근할 수 있기 때문에 데이터의 일관성을 위지하기 위해선 공유되는 객체에 동기화가 필요하다
		// Vector와 Hashtable같은 구버젼의 클래스들은 자체적으로 동기화 처리가 되어있다

	* 멀티쓰레드 프로그래밍이 아닌 경우에는 불필요한 기능이 되어 성능을 떨어뜨리는 요인이 된다.

	* 새로 추가된 ArrayList, HashMap과 같은 컬렉션은 동기화를 자체적으로 처리하지 않는다
		// 필요한 경우에만 java.util.Collections클래스의 동기화 메서드를 이용해서 동기화처리가 가능하도록 변경하였다

[ 1.13-2 변경불가 컬렉션 만들기 unmodifiable]
	* 멀티 쓰레드 프로그래밍에서 여러 쓰레드가 하나의 컬렉션을 공유하다보면 데이터가 손상될 수 있다
		// 저장된 데이터를 보호하기 위해서 컬렉션을 변경할 수 없게, 읽기전용으로 만들어야한다	

[ 1.13-3 싱글톤 컬렉션 만들기 singleton]
	* 단 하나의 객체만을 저장하는 컬렉션을 만들고 싶을 경우
		// ex) static List singletonList(Object o)
			- 매개변수로 저장할 요소를 지정하면, 해당 요소를 저장하는 컬렉션을 반환
				! 반환된 컬렉션은 변경할 수 없다

[ 1.13-4 한 종류의 객체만 저장하는 컬렉션 만들기 checked ]
	* 컬렉션에는 모든 종류의 객체를 저장할 수 있다
	
	* 컬렉션에 지정된 종류의 객체만 저장할 수 있도록 제한하고 싶을때
		// ex) static List checkedList(List list, Class type)
			- 두 번째 매개변수에 저장할 객체의 클래스를 지정하면 된다

		// ex)	List list = new ArrayList();
			List cList = checkedList(list, String.class);
			cList.add("abc"); 	//가능
			cList.add(new Integer(3)); //불가능