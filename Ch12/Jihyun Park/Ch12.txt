




* 지네릭스란(Generics)?
- 컴파일시 타입을 체크해 주는 기능 - 그동안은 한계가 있었음
- 객체의 타입 안정성을 높이고 형변환의 번거로움을 줄여줌
- [1. 타입 안정성을 제공 2. 타입체크와 형변환을 생략할 수 있으므로 코드가 간결해짐]


// Tv객체만 저장할 수 있는 ArrayList 생성
ArrayList<Tv> tvList = new ArrayList<tv>();

tvList.add(new Tv()); // ok
tvList.add(new Audio()); // 컴파일 에러. Tv 외에 다른 타입이 들어올 수 없음

ArrayList를 get(n)하면 Object타입이 반환된다. 컴파일러는 실제 객체 안에 뭐가 들어있는지 모르기 때문에 형변환 코드를 정상적으로 컴파일하지만, 실제 실행시에 에러가 발생한다.

예)
ArrayList list = new ArrayList();
list.add(10); // list.add(new Integer(10)); : 오토박싱
list.add(“30”); // 실수로라도 스트링을 넣으면 “지네릭스 사용시” 컴파일러가 잡아준다.

Integer i = (Integer)list.get(1); // 컴파일 OK
—> 컴파일의 한계

** 실행시 에러가 발생하면 프로그램이 죽기 때문에, 컴파일 에러가 낫다.

System.out.println(list);

==> 컴파일 무사통과, 실행시 에러


———————————————————————————

—> 지네릭스로 컴파일러에게 타입정보를 준다. 따라서 컴파일시부터 실행에러를 잡아낼 수 있다. [타입체크 강화]
—> <Object>로 작성시 예전처럼 여러 종류의 타입을 저장할 수 있으나, 형변환을 명시해야 한다.
—> 굳이 Object를 지네릭스로 써야할까? : 지네릭스가 도입된 JDK1.5부터는 써주는 것이 좋은 코드!


Exception의 후손 중 RuntimeException : 프로그래머의 실수

Runtime 에러들을 어떻게하면 컴파일단계에서 잡을 수 있을까 고민한 결과가 지네릭스. 실행 중 발생하는 형변환을 컴파일단계로 끌어옴.


* 타입변수
- 지네릭 클래스를 작성할 때, Object타입 대신 타입변수(E)를 선언해서 사용
- 타입변수는 보통 대문자 1글자 : E(배열의 요소인 Element줄임, Type의 T도 사용)
- 객체를 생성 시, 타입변수 (E) 대신 실제 타입을 지정(대입)해야 한다.
- 타입은 참조변수*와 생성자*에 넣어주어야 한다. (둘은 일치해야 함)


* 지네릭스, 열거형, 애너테이션
- Box<T> : 지네릭 클래스, ‘T의 Box’  또는 ‘T Box’라고 읽는다. —> 타입변수 T를 선언하는 것
- T : 타입변수 또는 타입 매개변수 (T는 타입문자)
- Box : 원시 타입(raw type) —> 일반 클래스일 때의 타입

[원시 타입]
class Box<T> {}

[대입된 타입(매개변수화된 타입)]
Box<String> b = new Box<String>();

* 지네릭 타입과 다형성
- 참조변수와 생성자에 대입된 타입은 꼭 일치해야 한다.
- 조상-자손타입을 넣을 수 없다.
- ArrayList<Tv> list = new ArrayList<Tv>(); //ok
- ArrayList<Product> list = new ArrayList<Tv>(); // 에러!

* 지네릭 클래스간의 다형성은 성립(여전히 대입된 타입은 일치해야 함)
- List<Tv> list = new ArrayList<Tv>(); // ok! 다형성 - ArrayList가 List를 구현
- List<Tv> list = new LinkedList<Tv>(); // ok! 다형성- LinkedList가 List를 구현

* 매개변수의 다형성도 성립
- ArrayList<Product> list = new ArrayList<Product>();
- list.add(new Product());
- list.add(new Tv());
- list.add(new Audio());


* Iterator<E>
- 클래스를 작성할 때, Object타입 대신 T와 같은 타입변수를 사용

* HashMap<K,V>
- 여러 개의 타입변수가 필요한 경우, 콤마를 구분자로 선언
- K : Key / V : Value


* 제한된 지네릭 클래스
- extends를 사용해서 대입할 수 있는 타입을 제한
- class FruitBox<T extends Fruit> {} // Fruit의 자손만 타입으로 지정가능

- 인터페이스인 경우에도 extends를 사용
- 예) interface Eatable {}
- Class FruitBox<T extends Eatable> { … }
- 인터페이스를 같이 쓸 때에는 콤마 아닌 & 사용


* 지네릭스의 제약 ****** 이해X ㅠㅠ
- 타입 변수에 대입은 인스턴스 별로 다르게 가능
- static멤버에 타입 변수 사용 불가 [static은 모든 인스턴스에 공통이므로]
- 배열 생성할 때 타입변수 사용불가. 타입변수로 배열 선언은 가능
(new 연산자 다음에 T를 쓸 수 없음)


* 와일드카드 <?>
- 지네릭스 타입이 일치해야만 하는 불편함 때문에 등장
- 하나의 참조변수로 대입된 타입이 다른 객체를 참조 가능
ArrayList<? Extends Product> list = new ArrayList<Tv>();
ArrayList<? Extends Product> list = new ArrayList<Audio>();
—> list 하나로 서로 다른 지네릭타입이 대입된 객체들을 다룰 수 있게 됨
—> 참조변수 하나로 대입된 타입이 다른 객체들(Tv, Audio)을 가리킬 수 있게 됨.

- <? extnds T> : 와일드카드의 상한 제한, T와 그 자손들만 가능
- <? super T> : 와일드 카드의 하한 제한, T와 그 조상들만 가능
- <?> : 제한 없음. 모든 타입이 가능. <? extends Object>와 동일

- 메서드의 매개변수에 와일드카드 사용 가능
static Juice makeJuice(FruitBox<? extends Fruit> box) {
	new FruitBox<Fruit>();
	new FruitBox<Apple>();
	—> 이처럼 Fruit 뿐만 아닌 Fruit를 상속받는 자손들도 가능하다.
	—> 와일드카드를 사용하면 지네릭스에서도 다형성을 누릴 수 있다.
	—> 서로 대입된 지네릭타입이 다른 객체들을 하나의 매개변수로 받을 수 있다.
}


* 지네릭 메서드 ** 이해X ㅠㅠㅠ
- 지네릭 타입이 선언된 메서드(타입변수는 메서드 내에서만 유효)
- 클래스의 타입 매개변수<T> 와 메서드의 타입 매개변수<T>는 별개
- 메서드를 호출할 때마다 타입을 대입해야한다 (대부분 생략 가능)
- 메서드를 호출할 때 타입을 생략하지 않을 때는 클래스 이름 생략 불가
- —> 와일드카드는 하나의 참조변수로 대입된타입이 다른 여러 지네릭객체를 다룰 수 있게 한 것이고, 지네릭메서드는 지네릭클래스처럼 호출할 때마다 다른 타입을 대입할 수 있는 것으로 두 개의 용도가 조금 다르다.
[와일드카드 - 하나의 참조변수로 서로 다른 타입이 대입된 여러 지네릭 객체를 다루기 위한 것
지네릭 메서드 - 메서드를 호출할 때마다 다른 지네릭 타입을 대입할 수 있게 한 것]
** 와일드카드가 안될 때 지네릭 메서드를 쓰는 경우가 많다.


* 지네릭 타입의 형변환
- 지네릭 타입과 원시 타입간의 형변환은 바람직하지 않다. (가능은 하지만 경고 발생)
- Box<Object> objBox = null;
- Box box = (Box) objBox; // OK. 지네릭타입 —> 원시타입 : 경고발생
- objBox = (Box<Object>) box; // OK. 원시ㅏ입 —> 지네릭타입 : 경고발생
- // JDK1.5부터 지네릭스등장 - 이 이후부터는 지네릭클래스를 원시타입만 쓰면 X

- 와일드카드가 사용된 지네릭 타입으로는 형변환 가능
- Box<Object> objBox = (Box<Object>)new Box<String>();
- // 에러, 형변환 불가능
- Box<? extends Object> wBox = (Box<? extends Object>)new Box<String>(); // OK
- Box<? extends Object> wBox = new Box<String>(); // 위 문장과 동일 (원래는 들어가야 하는 형변환문장이 생략된 것)


* 지네릭 타입의 제거
- 컴파일러는 지네릭 타입을 제거하고, 필요한 곳에 형변환을 넣는다.



열거형
열거형은 서로 관련된 상수를 편리하게 선언하기 위한 것 (JDK1.5부터 추가)
class Card {
static final int CLOVER = 0;
static final int HEART= 1;
static final int DIAMOND= 2;
static final int SPADE= 3;

static final int TWO = 0;
static final int THREE = 1;
static final int FOUR = 2;



final int kind;
final int num;
}

→ class Card {
enum Kind {CLOVER, HEART, DIAMOND, SPADE} // 열거형 Kind를 정의
enum Value {TWO, THREE, FOUR} // 열거형 Value를 정의

final Kind kind; //타입이 int가 아닌 Kind임.
final Value value;
}

** [타입에 안전한 열거형] ⇒ 실제 값이 같아도 타입이 다르면 컴파일 에러 발생
(C언어에서는 타입이 달라도 값이 같으면 조건식결과가 참이다.)

[기존 상수] - 상수의 값이 바뀌면, 해당 상수를 참조하는 모든 소스를 다시 컴파일해야 한다.
[열거형 상수] - 기존 소스를 다시 컴파일하지 않아도 된다.


열거형의 정의와 사용
[ enum 열거형이름 {상수명1, 상수명2, …} ]
괄호 {} 안에 상수 이름을 나열하면 된다.

예) enum Direction {EAST, SOUTH, WEST, NORTH}
사용법 : ‘열거형이름.상수명’ ⇒ 클래스의 static 변수를 참조하는 것과 동일
class Unit {
int x,y; // 유닛의 위치
Direction dir; // 열거형을 인스턴스 변수로 선언
void init() {
dir = Direction.EAST; //유닛의 방향을 EAST로 초기화
}
}

열거형 상수간의 비교에는 ‘==’ 사용 가능. (equals() 보다 성능이 빠르다.)
compareTo() 사용 가능
‘<’, ‘>’와 같은 비교연산자는 사용 불가능
switch문에도 사용 가능 - 단, case문에 열거형의 이름은 적지 않고 상수 이름만 적어야 한다.(p.693참조)

** 모든 열거형의 조상 - java.lang.Enum 내의 메서드들
values() : 열거형의 모든 상수를 배열에 담아 반환 : 컴파일러가 자동으로 추가
Class<E> getDeclaringClass() : 열거형의 Class객체를 반환
String name() : 열거형 상수의 이름을 문자열로 반환
int ordinal() : 열거형 상수가 정의된 순서를 반환(0부터 시작)
T valueOf(Class<T> enumType, String name)  : 지정된 열거형에서 name과 일치하는 열거형 상수를 반환

열거형에 멤버 추가하기
열거형 상수 값이 불연속적일 경우?
원하는 값을 상수 옆에 ()괄호를 통해 적어주고, 지정값을 저장하는 인스턴스변수와 생성자를 새로 추가해야 한다.
[ enum Direction {EAST(1), SOUTH(5), WEST(-1), NORTH(10)} ]

멤버 추가하기
먼저 열거형 상수를 모두 정의한 후에 멤버 추가 가능
예) enum Direction {
	EAST(1), SOUTH(5), WEST(-1), NORTH(10);
		private final int value; // 정수를 저장할 필드(인스턴스변수) 추가
		Direction(int value) {this.value = value;} // 생성자 추가
		public int getValue() {return value;}
}

열거형의 생성자는 외부에서 호출 불가 (열거형 생성자는 제어자가 묵시적으로 private)
열거형 상수에 여러 값을 지정할 수 있음 - 그에 맞게 인스턴스 변수/생성자등을 새로 추가해야 함

열거형에 추상메서드 추가하기
추가할 수도 있다 정도로만 알아두기 ^^;
예) 열거형 Transportation은 운송수단의 종류별로 상수를 정의하고 있고, 각 운송 수단에는 기본요금(BASIC_FARE)이 책정되어 있다. 그러나, 거리에 따라 요금을 계산하는 방식이 운송수단마다 다르기 때문에, 추상메서드’fare(int distance)’를 선언하면 각 열거형 상수가 이 추상 메서드를 반드시 구현해야 한다.

열거형의 이해
열거형 상수 하나하나가 객체이다.
[ enum Direction {EAST, SOUTH, WEST, NORTH} ] // 상수 하나하나가 Direction 객체
Direction 클래스의 상수 값은 각각 객체의 주소이고, 이 값은 변하지 않으므로 ‘==’로 비교가 가능한 것



애너테이션
주석처럼 프로그래밍 언어에 영향을 미치지 않으며, 유용한 정보를 제공
(소스코드와 문서를 하나의 파일로 관련하는 것처럼)
애너테이션 : 소스코드 + 설정파일(주로 xml)

표준 애너테이션
자바에서 제공하는 애너테이션
메타 애너테이션 : 애너테이션을 만들 때 사용

@Override → 컴파일러(javac.exe)가 사용하는 애너테이션
오버라이딩을 올바르게 했는지 컴파일러가 체크하게 한다.
오버라이딩할 때 메서드 이름을 잘못 적는 실수를 하는 경우 많다.
오버라이딩할 때는 메서드 선언부 앞에 @Override를 붙인다.
@Deprecated
앞으로 사용하지 않을 것을 권장하는 필드/메서드에 붙인다.
@Deprecated 사용 예 : Date클래스의 getDate()
주로 하위호환성 때문에 아예 지우지 않는 이유로 사용
@FunctionalInterface
함수형 인터페이스에 붙이면, 컴파일러가 올바르게 작성했는지 체크해줌. 함수형 인터페이스에는 하나의 추상메서드만 가져야 한다는 제약이 있음
@SuppressWarnings
컴파일러의 경고메세지가 나타나지 않게 억제함
괄호() 안에 억제하고자 하는 경고의 종류를 문자열로 지정
둘 이상의 경고를 동시에 억제하려면 다음과 같이 한다.
@SuppressWarnings({“unchecked”, “varargs”, “rawtypes”})

메타 애너테이션
애너테이션을 위한 애너테이션 (애너테이션을 만들 때 사용)
메타 애너테이션은 java.lang.annotation 패키지에 포함

@Target
애너테이션을 정의할 때, 적용대상 지정에 사용
@Retention
애너테이션이 유지되는 기간을 지정하는데 사용
컴파일러에 의해 사용되는 애너테이션의 유지 정책은 SOURCE이다.
실행시에 사용가능한 애너테이션의 정책은 RUNTIME이다.
@Documented, @Inherited
javadoc으로 작성한 문서에 포함시키려면 @Documented를 붙인다.
애너테이션을 자손 클래스에 상속하고자 할 때, @Inherited를 붙인다.
@Repeatable
반복해서 붙일 수 있는 애너테이션을 정의할 때 사용
이 애너테이션이 붙은 애너테이션은 반복해서 붙일 수 있다.
@Repeatable인 @ToDo를 하나로 묶을 컨테이너 애너테이션도 정의해야 함


애너테이션 타입 정의하기
애너테이션을 직접 만들어서 쓸 수 있다.
@interface 애너테이션이름 {
타입 요소이름(); // 애너테이션의 요소를 선언한다.
}
애너테이션의 메서드는 추상 메서드이며, 애너테이션을 적용할 때 지정(순서X)

애너테이션의 요소
적용시 값을 지정하지 않으면, 사용될 수 잇는 기본값 지정 가능(null제외)
요소가 하나이고 이름이 value일 때는 요소의 이름 생략 가능
요소의 타입이 배열인 경우, 괄호{}를 사용해야 한다.


모든 애너테이션의 조상
Annotation은 모든 애너테이션의 조상이지만 상속은 불가
사실 Annotation은 인터페이스다.

마커 애너테이션 (Marker Annotation)
요소가 하나도 정의되지 않은 애너테이션

애너테이션 요소의 규칙
애너테이션의 요소를 선언할 때 아래의 규칙을 반드시 지켜야 한다.
요소의 타입은 기본형, String, enum, 애너테이션, Class만 허용
괄호() 안에 매개변수를 선언할 수 없다.
예외를 선언할 수 없다.
요소를 타입 매개변수로 정의할 수 없다.


